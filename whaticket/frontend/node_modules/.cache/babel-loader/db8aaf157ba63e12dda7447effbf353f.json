{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = value => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = value => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = x => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/YouTube.tsx\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport isEqual from \"fast-deep-equal\";\nimport youTubePlayer from \"youtube-player\";\nfunction shouldUpdateVideo(prevProps, props) {\n  var _a, _b;\n  if (prevProps.videoId !== props.videoId) {\n    return true;\n  }\n  const prevVars = ((_a = prevProps.opts) == null ? void 0 : _a.playerVars) || {};\n  const vars = ((_b = props.opts) == null ? void 0 : _b.playerVars) || {};\n  return prevVars.start !== vars.start || prevVars.end !== vars.end;\n}\nfunction filterResetOptions(opts = {}) {\n  return __spreadProps(__spreadValues({}, opts), {\n    height: 0,\n    width: 0,\n    playerVars: __spreadProps(__spreadValues({}, opts.playerVars), {\n      autoplay: 0,\n      start: 0,\n      end: 0\n    })\n  });\n}\nfunction shouldResetPlayer(prevProps, props) {\n  return prevProps.videoId !== props.videoId || !isEqual(filterResetOptions(prevProps.opts), filterResetOptions(props.opts));\n}\nfunction shouldUpdatePlayer(prevProps, props) {\n  var _a, _b, _c, _d;\n  return prevProps.id !== props.id || prevProps.className !== props.className || ((_a = prevProps.opts) == null ? void 0 : _a.width) !== ((_b = props.opts) == null ? void 0 : _b.width) || ((_c = prevProps.opts) == null ? void 0 : _c.height) !== ((_d = props.opts) == null ? void 0 : _d.height) || prevProps.iframeClassName !== props.iframeClassName || prevProps.title !== props.title;\n}\nvar defaultProps = {\n  videoId: \"\",\n  id: \"\",\n  className: \"\",\n  iframeClassName: \"\",\n  style: {},\n  title: \"\",\n  loading: void 0,\n  opts: {},\n  onReady: () => {},\n  onError: () => {},\n  onPlay: () => {},\n  onPause: () => {},\n  onEnd: () => {},\n  onStateChange: () => {},\n  onPlaybackRateChange: () => {},\n  onPlaybackQualityChange: () => {}\n};\nvar propTypes = {\n  videoId: PropTypes.string,\n  id: PropTypes.string,\n  className: PropTypes.string,\n  iframeClassName: PropTypes.string,\n  style: PropTypes.object,\n  title: PropTypes.string,\n  loading: PropTypes.oneOf([\"lazy\", \"eager\"]),\n  opts: PropTypes.objectOf(PropTypes.any),\n  onReady: PropTypes.func,\n  onError: PropTypes.func,\n  onPlay: PropTypes.func,\n  onPause: PropTypes.func,\n  onEnd: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onPlaybackRateChange: PropTypes.func,\n  onPlaybackQualityChange: PropTypes.func\n};\nvar _YouTube = class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.destroyPlayerPromise = void 0;\n    this.onPlayerReady = event => {\n      var _a, _b;\n      return (_b = (_a = this.props).onReady) == null ? void 0 : _b.call(_a, event);\n    };\n    this.onPlayerError = event => {\n      var _a, _b;\n      return (_b = (_a = this.props).onError) == null ? void 0 : _b.call(_a, event);\n    };\n    this.onPlayerStateChange = event => {\n      var _a, _b, _c, _d, _e, _f, _g, _h;\n      (_b = (_a = this.props).onStateChange) == null ? void 0 : _b.call(_a, event);\n      switch (event.data) {\n        case _YouTube.PlayerState.ENDED:\n          (_d = (_c = this.props).onEnd) == null ? void 0 : _d.call(_c, event);\n          break;\n        case _YouTube.PlayerState.PLAYING:\n          (_f = (_e = this.props).onPlay) == null ? void 0 : _f.call(_e, event);\n          break;\n        case _YouTube.PlayerState.PAUSED:\n          (_h = (_g = this.props).onPause) == null ? void 0 : _h.call(_g, event);\n          break;\n        default:\n      }\n    };\n    this.onPlayerPlaybackRateChange = event => {\n      var _a, _b;\n      return (_b = (_a = this.props).onPlaybackRateChange) == null ? void 0 : _b.call(_a, event);\n    };\n    this.onPlayerPlaybackQualityChange = event => {\n      var _a, _b;\n      return (_b = (_a = this.props).onPlaybackQualityChange) == null ? void 0 : _b.call(_a, event);\n    };\n    this.destroyPlayer = () => {\n      if (this.internalPlayer) {\n        this.destroyPlayerPromise = this.internalPlayer.destroy().then(() => this.destroyPlayerPromise = void 0);\n        return this.destroyPlayerPromise;\n      }\n      return Promise.resolve();\n    };\n    this.createPlayer = () => {\n      if (typeof document === \"undefined\") return;\n      if (this.destroyPlayerPromise) {\n        this.destroyPlayerPromise.then(this.createPlayer);\n        return;\n      }\n      const playerOpts = __spreadProps(__spreadValues({}, this.props.opts), {\n        videoId: this.props.videoId\n      });\n      this.internalPlayer = youTubePlayer(this.container, playerOpts);\n      this.internalPlayer.on(\"ready\", this.onPlayerReady);\n      this.internalPlayer.on(\"error\", this.onPlayerError);\n      this.internalPlayer.on(\"stateChange\", this.onPlayerStateChange);\n      this.internalPlayer.on(\"playbackRateChange\", this.onPlayerPlaybackRateChange);\n      this.internalPlayer.on(\"playbackQualityChange\", this.onPlayerPlaybackQualityChange);\n      if (this.props.title || this.props.loading) {\n        this.internalPlayer.getIframe().then(iframe => {\n          if (this.props.title) iframe.setAttribute(\"title\", this.props.title);\n          if (this.props.loading) iframe.setAttribute(\"loading\", this.props.loading);\n        });\n      }\n    };\n    this.resetPlayer = () => this.destroyPlayer().then(this.createPlayer);\n    this.updatePlayer = () => {\n      var _a;\n      (_a = this.internalPlayer) == null ? void 0 : _a.getIframe().then(iframe => {\n        if (this.props.id) iframe.setAttribute(\"id\", this.props.id);else iframe.removeAttribute(\"id\");\n        if (this.props.iframeClassName) iframe.setAttribute(\"class\", this.props.iframeClassName);else iframe.removeAttribute(\"class\");\n        if (this.props.opts && this.props.opts.width) iframe.setAttribute(\"width\", this.props.opts.width.toString());else iframe.removeAttribute(\"width\");\n        if (this.props.opts && this.props.opts.height) iframe.setAttribute(\"height\", this.props.opts.height.toString());else iframe.removeAttribute(\"height\");\n        if (this.props.title) iframe.setAttribute(\"title\", this.props.title);else iframe.setAttribute(\"title\", \"YouTube video player\");\n        if (this.props.loading) iframe.setAttribute(\"loading\", this.props.loading);else iframe.removeAttribute(\"loading\");\n      });\n    };\n    this.getInternalPlayer = () => {\n      return this.internalPlayer;\n    };\n    this.updateVideo = () => {\n      var _a, _b, _c, _d;\n      if (typeof this.props.videoId === \"undefined\" || this.props.videoId === null) {\n        (_a = this.internalPlayer) == null ? void 0 : _a.stopVideo();\n        return;\n      }\n      let autoplay = false;\n      const opts = {\n        videoId: this.props.videoId\n      };\n      if ((_b = this.props.opts) == null ? void 0 : _b.playerVars) {\n        autoplay = this.props.opts.playerVars.autoplay === 1;\n        if (\"start\" in this.props.opts.playerVars) {\n          opts.startSeconds = this.props.opts.playerVars.start;\n        }\n        if (\"end\" in this.props.opts.playerVars) {\n          opts.endSeconds = this.props.opts.playerVars.end;\n        }\n      }\n      if (autoplay) {\n        (_c = this.internalPlayer) == null ? void 0 : _c.loadVideoById(opts);\n        return;\n      }\n      (_d = this.internalPlayer) == null ? void 0 : _d.cueVideoById(opts);\n    };\n    this.refContainer = container => {\n      this.container = container;\n    };\n    this.container = null;\n    this.internalPlayer = null;\n  }\n  componentDidMount() {\n    this.createPlayer();\n  }\n  componentDidUpdate(prevProps) {\n    return __async(this, null, function* () {\n      if (shouldUpdatePlayer(prevProps, this.props)) {\n        this.updatePlayer();\n      }\n      if (shouldResetPlayer(prevProps, this.props)) {\n        yield this.resetPlayer();\n      }\n      if (shouldUpdateVideo(prevProps, this.props)) {\n        this.updateVideo();\n      }\n    });\n  }\n  componentWillUnmount() {\n    this.destroyPlayer();\n  }\n  render() {\n    return /* @__PURE__ */React.createElement(\"div\", {\n      className: this.props.className,\n      style: this.props.style\n    }, /* @__PURE__ */React.createElement(\"div\", {\n      id: this.props.id,\n      className: this.props.iframeClassName,\n      ref: this.refContainer\n    }));\n  }\n};\nvar YouTube = _YouTube;\nYouTube.propTypes = propTypes;\nYouTube.defaultProps = defaultProps;\nYouTube.PlayerState = {\n  UNSTARTED: -1,\n  ENDED: 0,\n  PLAYING: 1,\n  PAUSED: 2,\n  BUFFERING: 3,\n  CUED: 5\n};\nvar YouTube_default = YouTube;\nexport { YouTube_default as default };","map":{"version":3,"sources":["../src/YouTube.tsx"],"names":[],"mappings":"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","sourcesContent":["/** @jsxRuntime classic */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport isEqual from 'fast-deep-equal';\nimport youTubePlayer from 'youtube-player';\nimport type { YouTubePlayer, Options } from 'youtube-player/dist/types';\n\n/**\n * Check whether a `props` change should result in the video being updated.\n */\nfunction shouldUpdateVideo(prevProps: YouTubeProps, props: YouTubeProps) {\n  // A changing video should always trigger an update\n  if (prevProps.videoId !== props.videoId) {\n    return true;\n  }\n\n  // Otherwise, a change in the start/end time playerVars also requires a player\n  // update.\n  const prevVars = prevProps.opts?.playerVars || {};\n  const vars = props.opts?.playerVars || {};\n\n  return prevVars.start !== vars.start || prevVars.end !== vars.end;\n}\n\n/**\n * Neutralize API options that only require a video update, leaving only options\n * that require a player reset. The results can then be compared to see if a\n * player reset is necessary.\n */\nfunction filterResetOptions(opts: Options = {}) {\n  return {\n    ...opts,\n    height: 0,\n    width: 0,\n    playerVars: {\n      ...opts.playerVars,\n      autoplay: 0,\n      start: 0,\n      end: 0,\n    },\n  };\n}\n\n/**\n * Check whether a `props` change should result in the player being reset.\n * The player is reset when the `props.opts` change, except if the only change\n * is in the `start` and `end` playerVars, because a video update can deal with\n * those.\n */\nfunction shouldResetPlayer(prevProps: YouTubeProps, props: YouTubeProps) {\n  return (\n    prevProps.videoId !== props.videoId || !isEqual(filterResetOptions(prevProps.opts), filterResetOptions(props.opts))\n  );\n}\n\n/**\n * Check whether a props change should result in an update of player.\n */\nfunction shouldUpdatePlayer(prevProps: YouTubeProps, props: YouTubeProps) {\n  return (\n    prevProps.id !== props.id ||\n    prevProps.className !== props.className ||\n    prevProps.opts?.width !== props.opts?.width ||\n    prevProps.opts?.height !== props.opts?.height ||\n    prevProps.iframeClassName !== props.iframeClassName ||\n    prevProps.title !== props.title\n  );\n}\n\ntype YoutubePlayerCueVideoOptions = {\n  videoId: string;\n  startSeconds?: number;\n  endSeconds?: number;\n  suggestedQuality?: string;\n};\n\nexport { YouTubePlayer };\n\nexport type YouTubeEvent<T = any> = {\n  data: T;\n  target: YouTubePlayer;\n};\n\nexport type YouTubeProps = {\n  /**\n   * The YouTube video ID.\n   *\n   * Examples\n   * - https://www.youtube.com/watch?v=XxVg_s8xAms (`XxVg_s8xAms` is the ID)\n   * - https://www.youtube.com/embed/-DX3vJiqxm4 (`-DX3vJiqxm4` is the ID)\n   */\n  videoId?: string;\n  /**\n   * Custom ID for the player element\n   */\n  id?: string;\n  /**\n   * Custom class name for the player element\n   */\n  className?: string;\n  /**\n   * Custom class name for the iframe element\n   */\n  iframeClassName?: string;\n  /**\n   * Custom style for the player container element\n   */\n  style?: React.CSSProperties;\n  /**\n   * Title of the video for the iframe's title tag.\n   */\n  title?: React.IframeHTMLAttributes<HTMLIFrameElement>['title'];\n  /**\n   * Indicates how the browser should load the iframe\n   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-loading}\n   */\n  loading?: React.IframeHTMLAttributes<HTMLIFrameElement>['loading'];\n  /**\n   * An object that specifies player options\n   * {@link https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player}\n   */\n  opts?: Options;\n  /**\n   * This event fires whenever a player has finished loading and is ready to begin receiving API calls.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onReady}\n   */\n  onReady?: (event: YouTubeEvent) => void;\n  /**\n   * This event fires if an error occurs in the player.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onError}\n   */\n  onError?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires when the layer's state changes to PlayerState.PLAYING.\n   */\n  onPlay?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires when the layer's state changes to PlayerState.PAUSED.\n   */\n  onPause?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires when the layer's state changes to PlayerState.ENDED.\n   */\n  onEnd?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires whenever the player's state changes.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onStateChange}\n   */\n  onStateChange?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires whenever the video playback quality changes.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onPlaybackRateChange}\n   */\n  onPlaybackRateChange?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires whenever the video playback rate changes.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onPlaybackQualityChange}\n   */\n  onPlaybackQualityChange?: (event: YouTubeEvent<string>) => void;\n};\n\nconst defaultProps: YouTubeProps = {\n  videoId: '',\n  id: '',\n  className: '',\n  iframeClassName: '',\n  style: {},\n  title: '',\n  loading: undefined,\n  opts: {},\n  onReady: () => {},\n  onError: () => {},\n  onPlay: () => {},\n  onPause: () => {},\n  onEnd: () => {},\n  onStateChange: () => {},\n  onPlaybackRateChange: () => {},\n  onPlaybackQualityChange: () => {},\n};\n\nconst propTypes = {\n  videoId: PropTypes.string,\n  id: PropTypes.string,\n  className: PropTypes.string,\n  iframeClassName: PropTypes.string,\n  style: PropTypes.object,\n  title: PropTypes.string,\n  loading: PropTypes.oneOf(['lazy', 'eager']),\n  opts: PropTypes.objectOf(PropTypes.any),\n  onReady: PropTypes.func,\n  onError: PropTypes.func,\n  onPlay: PropTypes.func,\n  onPause: PropTypes.func,\n  onEnd: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onPlaybackRateChange: PropTypes.func,\n  onPlaybackQualityChange: PropTypes.func,\n};\n\nclass YouTube extends React.Component<YouTubeProps> {\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n\n  /**\n   * Expose PlayerState constants for convenience. These constants can also be\n   * accessed through the global YT object after the YouTube IFrame API is instantiated.\n   * https://developers.google.com/youtube/iframe_api_reference#onStateChange\n   */\n  static PlayerState = {\n    UNSTARTED: -1,\n    ENDED: 0,\n    PLAYING: 1,\n    PAUSED: 2,\n    BUFFERING: 3,\n    CUED: 5,\n  };\n\n  container: HTMLDivElement | null;\n  internalPlayer: YouTubePlayer | null;\n\n  constructor(props: any) {\n    super(props);\n\n    this.container = null;\n    this.internalPlayer = null;\n  }\n\n  /**\n   * Note: The `youtube-player` package that is used promisifies all YouTube\n   * Player API calls, which introduces a delay of a tick before it actually\n   * gets destroyed.\n   *\n   * The promise to destroy the player is stored here so we can make sure to\n   * only re-create the Player after it's been destroyed.\n   *\n   * See: https://github.com/tjallingt/react-youtube/issues/355\n   */\n  destroyPlayerPromise: Promise<void> | undefined = undefined;\n\n  componentDidMount() {\n    this.createPlayer();\n  }\n\n  async componentDidUpdate(prevProps: YouTubeProps) {\n    if (shouldUpdatePlayer(prevProps, this.props)) {\n      this.updatePlayer();\n    }\n\n    if (shouldResetPlayer(prevProps, this.props)) {\n      await this.resetPlayer();\n    }\n\n    if (shouldUpdateVideo(prevProps, this.props)) {\n      this.updateVideo();\n    }\n  }\n\n  componentWillUnmount() {\n    this.destroyPlayer();\n  }\n\n  /**\n   * This event fires whenever a player has finished loading and is ready to begin receiving API calls.\n   * https://developers.google.com/youtube/iframe_api_reference#onReady\n   */\n  onPlayerReady = (event: YouTubeEvent) => this.props.onReady?.(event);\n\n  /**\n   * This event fires if an error occurs in the player.\n   * https://developers.google.com/youtube/iframe_api_reference#onError\n   */\n  onPlayerError = (event: YouTubeEvent<number>) => this.props.onError?.(event);\n\n  /**\n   * This event fires whenever the video playback quality changes.\n   * https://developers.google.com/youtube/iframe_api_reference#onStateChange\n   */\n  onPlayerStateChange = (event: YouTubeEvent<number>) => {\n    this.props.onStateChange?.(event);\n    // @ts-ignore\n    switch (event.data) {\n      case YouTube.PlayerState.ENDED:\n        this.props.onEnd?.(event);\n        break;\n\n      case YouTube.PlayerState.PLAYING:\n        this.props.onPlay?.(event);\n        break;\n\n      case YouTube.PlayerState.PAUSED:\n        this.props.onPause?.(event);\n        break;\n\n      default:\n    }\n  };\n\n  /**\n   * This event fires whenever the video playback quality changes.\n   * https://developers.google.com/youtube/iframe_api_reference#onPlaybackRateChange\n   */\n  onPlayerPlaybackRateChange = (event: YouTubeEvent<number>) => this.props.onPlaybackRateChange?.(event);\n\n  /**\n   * This event fires whenever the video playback rate changes.\n   * https://developers.google.com/youtube/iframe_api_reference#onPlaybackQualityChange\n   */\n  onPlayerPlaybackQualityChange = (event: YouTubeEvent<string>) => this.props.onPlaybackQualityChange?.(event);\n\n  /**\n   * Destroy the YouTube Player using its async API and store the promise so we\n   * can await before re-creating it.\n   */\n  destroyPlayer = () => {\n    if (this.internalPlayer) {\n      this.destroyPlayerPromise = this.internalPlayer.destroy().then(() => (this.destroyPlayerPromise = undefined));\n      return this.destroyPlayerPromise;\n    }\n    return Promise.resolve();\n  };\n\n  /**\n   * Initialize the YouTube Player API on the container and attach event handlers\n   */\n  createPlayer = () => {\n    // do not attempt to create a player server-side, it won't work\n    if (typeof document === 'undefined') return;\n    if (this.destroyPlayerPromise) {\n      // We need to first await the existing player to be destroyed before\n      // we can re-create it.\n      this.destroyPlayerPromise.then(this.createPlayer);\n      return;\n    }\n    // create player\n    const playerOpts: Options = {\n      ...this.props.opts,\n      // preload the `videoId` video if one is already given\n      videoId: this.props.videoId,\n    };\n    this.internalPlayer = youTubePlayer(this.container!, playerOpts);\n    // attach event handlers\n    this.internalPlayer.on('ready', this.onPlayerReady as any);\n    this.internalPlayer.on('error', this.onPlayerError as any);\n    this.internalPlayer.on('stateChange', this.onPlayerStateChange as any);\n    this.internalPlayer.on('playbackRateChange', this.onPlayerPlaybackRateChange as any);\n    this.internalPlayer.on('playbackQualityChange', this.onPlayerPlaybackQualityChange as any);\n    if (this.props.title || this.props.loading) {\n      this.internalPlayer.getIframe().then((iframe) => {\n        if (this.props.title) iframe.setAttribute('title', this.props.title);\n        if (this.props.loading) iframe.setAttribute('loading', this.props.loading);\n      });\n    }\n  };\n\n  /**\n   * Shorthand for destroying and then re-creating the YouTube Player\n   */\n  resetPlayer = () => this.destroyPlayer().then(this.createPlayer);\n\n  /**\n   * Method to update the id and class of the YouTube Player iframe.\n   * React should update this automatically but since the YouTube Player API\n   * replaced the DIV that is mounted by React we need to do this manually.\n   */\n  updatePlayer = () => {\n    this.internalPlayer?.getIframe().then((iframe) => {\n      if (this.props.id) iframe.setAttribute('id', this.props.id);\n      else iframe.removeAttribute('id');\n      if (this.props.iframeClassName) iframe.setAttribute('class', this.props.iframeClassName);\n      else iframe.removeAttribute('class');\n      if (this.props.opts && this.props.opts.width) iframe.setAttribute('width', this.props.opts.width.toString());\n      else iframe.removeAttribute('width');\n      if (this.props.opts && this.props.opts.height) iframe.setAttribute('height', this.props.opts.height.toString());\n      else iframe.removeAttribute('height');\n      if (this.props.title) iframe.setAttribute('title', this.props.title);\n      else iframe.setAttribute('title', 'YouTube video player');\n      if (this.props.loading) iframe.setAttribute('loading', this.props.loading);\n      else iframe.removeAttribute('loading');\n    });\n  };\n\n  /**\n   *  Method to return the internalPlayer object.\n   */\n  getInternalPlayer = () => {\n    return this.internalPlayer;\n  };\n\n  /**\n   * Call YouTube Player API methods to update the currently playing video.\n   * Depending on the `opts.playerVars.autoplay` this function uses one of two\n   * YouTube Player API methods to update the video.\n   */\n  updateVideo = () => {\n    if (typeof this.props.videoId === 'undefined' || this.props.videoId === null) {\n      this.internalPlayer?.stopVideo();\n      return;\n    }\n\n    // set queueing options\n    let autoplay = false;\n    const opts: YoutubePlayerCueVideoOptions = {\n      videoId: this.props.videoId,\n    };\n\n    if (this.props.opts?.playerVars) {\n      autoplay = this.props.opts.playerVars.autoplay === 1;\n      if ('start' in this.props.opts.playerVars) {\n        opts.startSeconds = this.props.opts.playerVars.start;\n      }\n      if ('end' in this.props.opts.playerVars) {\n        opts.endSeconds = this.props.opts.playerVars.end;\n      }\n    }\n\n    // if autoplay is enabled loadVideoById\n    if (autoplay) {\n      this.internalPlayer?.loadVideoById(opts);\n      return;\n    }\n    // default behaviour just cues the video\n    this.internalPlayer?.cueVideoById(opts);\n  };\n\n  refContainer = (container: HTMLDivElement) => {\n    this.container = container;\n  };\n\n  render() {\n    return (\n      <div className={this.props.className} style={this.props.style}>\n        <div id={this.props.id} className={this.props.iframeClassName} ref={this.refContainer} />\n      </div>\n    );\n  }\n}\n\nexport default YouTube;\n"]},"metadata":{},"sourceType":"module"}