{"ast":null,"code":"import io from \"socket.io-client\";\nclass SocketWorker {\n  constructor(companyId, userId) {\n    if (!SocketWorker.instance) {\n      this.companyId = companyId;\n      this.userId = userId;\n      this.socket = null;\n      this.configureSocket();\n      this.eventListeners = {}; // Armazena os ouvintes de eventos registrados\n      SocketWorker.instance = this;\n    }\n    return SocketWorker.instance;\n  }\n  configureSocket() {\n    this.socket = io(`${process.env.REACT_APP_BACKEND_URL}/${this === null || this === void 0 ? void 0 : this.companyId}`, {\n      autoConnect: true,\n      reconnection: true,\n      reconnectionDelay: 1000,\n      reconnectionAttempts: Infinity,\n      query: {\n        userId: this.userId\n      }\n    });\n    this.socket.on(\"connect\", () => {\n      console.log(\"Conectado ao servidor Socket.IO\");\n    });\n    this.socket.on(\"disconnect\", () => {\n      console.log(\"Desconectado do servidor Socket.IO\");\n      this.reconnectAfterDelay();\n    });\n  }\n\n  // Adiciona um ouvinte de eventos\n  on(event, callback) {\n    this.connect();\n    this.socket.on(event, callback);\n\n    // Armazena o ouvinte no objeto de ouvintes\n    if (!this.eventListeners[event]) {\n      this.eventListeners[event] = [];\n    }\n    this.eventListeners[event].push(callback);\n  }\n\n  // Emite um evento\n  emit(event, data) {\n    this.connect();\n    this.socket.emit(event, data);\n  }\n\n  // Desconecta um ou mais ouvintes de eventos\n  off(event, callback) {\n    this.connect();\n    if (this.eventListeners[event]) {\n      // console.log(\"Desconectando do servidor Socket.IO:\", event, callback);\n      if (callback) {\n        // Desconecta um ouvinte específico\n        this.socket.off(event, callback);\n        this.eventListeners[event] = this.eventListeners[event].filter(cb => cb !== callback);\n      } else {\n        // console.log(\"DELETOU EVENTOS DO SOCKET:\", this.eventListeners[event]);\n\n        // Desconecta todos os ouvintes do evento\n        this.eventListeners[event].forEach(cb => this.socket.off(event, cb));\n        delete this.eventListeners[event];\n      }\n      // console.log(\"EVENTOS DO SOCKET:\", this.eventListeners);\n    }\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.instance = null;\n      console.log(\"Socket desconectado manualmente\");\n    }\n  }\n  reconnectAfterDelay() {\n    setTimeout(() => {\n      if (!this.socket || !this.socket.connected) {\n        console.log(\"Tentando reconectar após desconexão\");\n        this.connect();\n      }\n    }, 1000);\n  }\n\n  // Garante que o socket esteja conectado\n  connect() {\n    if (!this.socket) {\n      this.configureSocket();\n    }\n  }\n  forceReconnect() {}\n}\n\n// const instance = (companyId, userId) => new SocketWorker(companyId,userId);\nconst instance = (companyId, userId) => new SocketWorker(companyId, userId);\nexport default instance;","map":{"version":3,"names":["io","SocketWorker","constructor","companyId","userId","instance","socket","configureSocket","eventListeners","process","env","REACT_APP_BACKEND_URL","autoConnect","reconnection","reconnectionDelay","reconnectionAttempts","Infinity","query","on","console","log","reconnectAfterDelay","event","callback","connect","push","emit","data","off","filter","cb","forEach","disconnect","setTimeout","connected","forceReconnect"],"sources":["/workspaces/simao/whaticket/frontend/src/services/SocketWorker.js"],"sourcesContent":["import io from \"socket.io-client\";\n\nclass SocketWorker {\n  constructor(companyId , userId) {\n    if (!SocketWorker.instance) {\n      this.companyId = companyId\n      this.userId = userId\n      this.socket = null;\n      this.configureSocket();\n      this.eventListeners = {}; // Armazena os ouvintes de eventos registrados\n      SocketWorker.instance = this;\n\n    } \n\n    return SocketWorker.instance;\n  }\n\n  configureSocket() {\n    this.socket = io(`${process.env.REACT_APP_BACKEND_URL}/${this?.companyId}` , {\n      autoConnect: true,\n      reconnection: true,\n      reconnectionDelay: 1000,\n      reconnectionAttempts: Infinity,\n      query: { userId: this.userId }\n    });\n\n    this.socket.on(\"connect\", () => {\n      console.log(\"Conectado ao servidor Socket.IO\");\n    });\n\n    this.socket.on(\"disconnect\", () => {\n      console.log(\"Desconectado do servidor Socket.IO\");\n      this.reconnectAfterDelay();\n    });\n  }\n\n  // Adiciona um ouvinte de eventos\n  on(event, callback) {\n    this.connect();\n    this.socket.on(event, callback);\n\n    // Armazena o ouvinte no objeto de ouvintes\n    if (!this.eventListeners[event]) {\n      this.eventListeners[event] = [];\n    }\n    this.eventListeners[event].push(callback);\n  }\n\n  // Emite um evento\n  emit(event, data) {\n    this.connect();\n    this.socket.emit(event, data);\n  }\n\n  // Desconecta um ou mais ouvintes de eventos\n  off(event, callback) {\n    this.connect();\n    if (this.eventListeners[event]) {\n      // console.log(\"Desconectando do servidor Socket.IO:\", event, callback);\n      if (callback) {\n        // Desconecta um ouvinte específico\n        this.socket.off(event, callback);\n        this.eventListeners[event] = this.eventListeners[event].filter(cb => cb !== callback);\n      } else {\n        // console.log(\"DELETOU EVENTOS DO SOCKET:\", this.eventListeners[event]);\n\n        // Desconecta todos os ouvintes do evento\n        this.eventListeners[event].forEach(cb => this.socket.off(event, cb));\n        delete this.eventListeners[event];\n      }\n      // console.log(\"EVENTOS DO SOCKET:\", this.eventListeners);\n    }\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null\n      this.instance = null\n      console.log(\"Socket desconectado manualmente\");\n    }\n  }\n\n  reconnectAfterDelay() {\n    setTimeout(() => {\n      if (!this.socket || !this.socket.connected) {\n        console.log(\"Tentando reconectar após desconexão\");\n        this.connect();\n      }\n    }, 1000);\n  }\n\n  // Garante que o socket esteja conectado\n  connect() {\n    if (!this.socket) {\n      this.configureSocket();\n    }\n  }\n\n  forceReconnect() {\n\n  }\n}\n\n// const instance = (companyId, userId) => new SocketWorker(companyId,userId);\nconst instance = (companyId, userId) => new SocketWorker(companyId, userId);\n\nexport default instance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}