{"ast":null,"code":"import * as r from \"react\";\nfunction n() {\n  return n = Object.assign ? Object.assign.bind() : function (r) {\n    for (var n = 1; n < arguments.length; n++) {\n      var e = arguments[n];\n      for (var t in e) Object.prototype.hasOwnProperty.call(e, t) && (r[t] = e[t]);\n    }\n    return r;\n  }, n.apply(this, arguments);\n}\nvar e = [\"children\", \"options\"],\n  t = {\n    blockQuote: \"0\",\n    breakLine: \"1\",\n    breakThematic: \"2\",\n    codeBlock: \"3\",\n    codeFenced: \"4\",\n    codeInline: \"5\",\n    footnote: \"6\",\n    footnoteReference: \"7\",\n    gfmTask: \"8\",\n    heading: \"9\",\n    headingSetext: \"10\",\n    htmlBlock: \"11\",\n    htmlComment: \"12\",\n    htmlSelfClosing: \"13\",\n    image: \"14\",\n    link: \"15\",\n    linkAngleBraceStyleDetector: \"16\",\n    linkBareUrlDetector: \"17\",\n    linkMailtoDetector: \"18\",\n    newlineCoalescer: \"19\",\n    orderedList: \"20\",\n    paragraph: \"21\",\n    ref: \"22\",\n    refImage: \"23\",\n    refLink: \"24\",\n    table: \"25\",\n    tableSeparator: \"26\",\n    text: \"27\",\n    textBolded: \"28\",\n    textEmphasized: \"29\",\n    textEscaped: \"30\",\n    textMarked: \"31\",\n    textStrikethroughed: \"32\",\n    unorderedList: \"33\"\n  },\n  u = [\"allowFullScreen\", \"allowTransparency\", \"autoComplete\", \"autoFocus\", \"autoPlay\", \"cellPadding\", \"cellSpacing\", \"charSet\", \"classId\", \"colSpan\", \"contentEditable\", \"contextMenu\", \"crossOrigin\", \"encType\", \"formAction\", \"formEncType\", \"formMethod\", \"formNoValidate\", \"formTarget\", \"frameBorder\", \"hrefLang\", \"inputMode\", \"keyParams\", \"keyType\", \"marginHeight\", \"marginWidth\", \"maxLength\", \"mediaGroup\", \"minLength\", \"noValidate\", \"radioGroup\", \"readOnly\", \"rowSpan\", \"spellCheck\", \"srcDoc\", \"srcLang\", \"srcSet\", \"tabIndex\", \"useMap\"].reduce(function (r, n) {\n    return r[n.toLowerCase()] = n, r;\n  }, {\n    class: \"className\",\n    for: \"htmlFor\"\n  }),\n  a = {\n    amp: \"&\",\n    apos: \"'\",\n    gt: \">\",\n    lt: \"<\",\n    nbsp: \" \",\n    quot: \"“\"\n  },\n  i = [\"style\", \"script\", \"pre\"],\n  o = [\"src\", \"href\", \"data\", \"formAction\", \"srcDoc\", \"action\"],\n  c = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi,\n  f = /mailto:/i,\n  l = /\\n{2,}$/,\n  _ = /^(\\s*>[\\s\\S]*?)(?=\\n\\n|$)/,\n  d = /^ *> ?/gm,\n  s = /^(?:\\[!([^\\]]*)\\]\\n)?([\\s\\S]*)/,\n  p = /^ {2,}\\n/,\n  v = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/,\n  y = /^(?: {1,3})?(`{3,}|~{3,}) *(\\S+)? *([^\\n]*?)?\\n([\\s\\S]*?)(?:\\1\\n?|$)/,\n  h = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/,\n  g = /^(`+)((?:\\\\`|(?!\\1)`|[^`])+)\\1/,\n  m = /^(?:\\n *)*\\n/,\n  k = /\\r\\n?/g,\n  x = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/,\n  q = /^\\[\\^([^\\]]+)]/,\n  b = /\\f/g,\n  S = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/,\n  z = /^\\s*?\\[(x|\\s)\\]/,\n  $ = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  E = /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  A = /^([^\\n]+)\\n *(=|-){3,} *\\n/,\n  R = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i,\n  B = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi,\n  L = /^<!--[\\s\\S]*?(?:-->)/,\n  O = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/,\n  j = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i,\n  C = /^\\{.*\\}$/,\n  I = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  T = /^<([^ >]+@[^ >]+)>/,\n  M = /^<([^ >]+:\\/[^ >]+)>/,\n  w = /-([a-z])?/gi,\n  D = /^(\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/,\n  F = /^[^\\n]+(?:  \\n|\\n{2,})/,\n  P = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/,\n  Z = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  N = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  G = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/,\n  U = /\\t/g,\n  V = /(^ *\\||\\| *$)/g,\n  H = /^ *:-+: *$/,\n  Q = /^ *:-+ *$/,\n  W = /^ *-+: *$/,\n  J = \"((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|\\\\\\\\\\\\1|[\\\\s\\\\S])+?)\",\n  K = RegExp(\"^([*_])\\\\1\" + J + \"\\\\1\\\\1(?!\\\\1)\"),\n  X = RegExp(\"^([*_])\" + J + \"\\\\1(?!\\\\1)\"),\n  Y = RegExp(\"^(==)\" + J + \"\\\\1\"),\n  rr = RegExp(\"^(~~)\" + J + \"\\\\1\"),\n  nr = /^(:[a-zA-Z0-9-_]+:)/,\n  er = /^\\\\([^0-9A-Za-z\\s])/,\n  tr = /\\\\([^0-9A-Za-z\\s])/g,\n  ur = /^[\\s\\S](?:(?!  \\n|[0-9]\\.|http)[^=*_~\\-\\n:<`\\\\\\[!])*/,\n  ar = /^\\n+/,\n  ir = /^([ \\t]*)/,\n  or = /(?:^|\\n)( *)$/,\n  cr = \"(?:\\\\d+\\\\.)\",\n  fr = \"(?:[*+-])\";\nfunction lr(r) {\n  return \"( *)(\" + (1 === r ? cr : fr) + \") +\";\n}\nvar _r = lr(1),\n  dr = lr(2);\nfunction sr(r) {\n  return RegExp(\"^\" + (1 === r ? _r : dr));\n}\nvar pr = sr(1),\n  vr = sr(2);\nfunction yr(r) {\n  return RegExp(\"^\" + (1 === r ? _r : dr) + \"[^\\\\n]*(?:\\\\n(?!\\\\1\" + (1 === r ? cr : fr) + \" )[^\\\\n]*)*(\\\\n|$)\", \"gm\");\n}\nvar hr = yr(1),\n  gr = yr(2);\nfunction mr(r) {\n  var n = 1 === r ? cr : fr;\n  return RegExp(\"^( *)(\" + n + \") [\\\\s\\\\S]+?(?:\\\\n{2,}(?! )(?!\\\\1\" + n + \" (?!\" + n + \" ))\\\\n*|\\\\s*\\\\n*$)\");\n}\nvar kr = mr(1),\n  xr = mr(2);\nfunction qr(r, n) {\n  var e = 1 === n,\n    t = e ? kr : xr,\n    u = e ? hr : gr,\n    a = e ? pr : vr;\n  return {\n    t: function (r) {\n      return a.test(r);\n    },\n    u: jr(function (r, n) {\n      var e = or.exec(n.prevCapture);\n      return e && (n.list || !n.inline && !n.simple) ? t.exec(r = e[1] + r) : null;\n    }),\n    i: 1,\n    o: function (r, n, t) {\n      var i = e ? +r[2] : void 0,\n        o = r[0].replace(l, \"\\n\").match(u),\n        c = !1;\n      return {\n        items: o.map(function (r, e) {\n          var u = a.exec(r)[0].length,\n            i = RegExp(\"^ {1,\" + u + \"}\", \"gm\"),\n            f = r.replace(i, \"\").replace(a, \"\"),\n            l = e === o.length - 1,\n            _ = -1 !== f.indexOf(\"\\n\\n\") || l && c;\n          c = _;\n          var d,\n            s = t.inline,\n            p = t.list;\n          t.list = !0, _ ? (t.inline = !1, d = zr(f) + \"\\n\\n\") : (t.inline = !0, d = zr(f));\n          var v = n(d, t);\n          return t.inline = s, t.list = p, v;\n        }),\n        ordered: e,\n        start: i\n      };\n    },\n    l: function (n, e, t) {\n      return r(n.ordered ? \"ol\" : \"ul\", {\n        key: t.key,\n        start: \"20\" === n.type ? n.start : void 0\n      }, n.items.map(function (n, u) {\n        return r(\"li\", {\n          key: u\n        }, e(n, t));\n      }));\n    }\n  };\n}\nvar br = RegExp(\"^\\\\[((?:\\\\[[^\\\\[\\\\]]*(?:\\\\[[^\\\\[\\\\]]*\\\\][^\\\\[\\\\]]*)*\\\\]|[^\\\\[\\\\]])*)\\\\]\\\\(\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n  Sr = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/;\nfunction zr(r) {\n  for (var n = r.length; n > 0 && r[n - 1] <= \" \";) n--;\n  return r.slice(0, n);\n}\nfunction $r(r, n) {\n  return r.startsWith(n);\n}\nfunction Er(r, n, e) {\n  if (Array.isArray(e)) {\n    for (var t = 0; t < e.length; t++) if ($r(r, e[t])) return !0;\n    return !1;\n  }\n  return e(r, n);\n}\nfunction Ar(r) {\n  return r.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, \"a\").replace(/[çÇ]/g, \"c\").replace(/[ðÐ]/g, \"d\").replace(/[ÈÉÊËéèêë]/g, \"e\").replace(/[ÏïÎîÍíÌì]/g, \"i\").replace(/[Ññ]/g, \"n\").replace(/[øØœŒÕõÔôÓóÒò]/g, \"o\").replace(/[ÜüÛûÚúÙù]/g, \"u\").replace(/[ŸÿÝý]/g, \"y\").replace(/[^a-z0-9- ]/gi, \"\").replace(/ /gi, \"-\").toLowerCase();\n}\nfunction Rr(r) {\n  return W.test(r) ? \"right\" : H.test(r) ? \"center\" : Q.test(r) ? \"left\" : null;\n}\nfunction Br(r, n, e, t) {\n  var u = e.inTable;\n  e.inTable = !0;\n  var a = [[]],\n    i = \"\";\n  function o() {\n    if (i) {\n      var r = a[a.length - 1];\n      r.push.apply(r, n(i, e)), i = \"\";\n    }\n  }\n  return r.trim().split(/(`[^`]*`|\\\\\\||\\|)/).filter(Boolean).forEach(function (r, n, e) {\n    \"|\" === r.trim() && (o(), t) ? 0 !== n && n !== e.length - 1 && a.push([]) : i += r;\n  }), o(), e.inTable = u, a;\n}\nfunction Lr(r, n, e) {\n  e.inline = !0;\n  var t = r[2] ? r[2].replace(V, \"\").split(\"|\").map(Rr) : [],\n    u = r[3] ? function (r, n, e) {\n      return r.trim().split(\"\\n\").map(function (r) {\n        return Br(r, n, e, !0);\n      });\n    }(r[3], n, e) : [],\n    a = Br(r[1], n, e, !!u.length);\n  return e.inline = !1, u.length ? {\n    align: t,\n    cells: u,\n    header: a,\n    type: \"25\"\n  } : {\n    children: a,\n    type: \"21\"\n  };\n}\nfunction Or(r, n) {\n  return null == r.align[n] ? {} : {\n    textAlign: r.align[n]\n  };\n}\nfunction jr(r) {\n  return r.inline = 1, r;\n}\nfunction Cr(r) {\n  return jr(function (n, e) {\n    return e.inline ? r.exec(n) : null;\n  });\n}\nfunction Ir(r) {\n  return jr(function (n, e) {\n    return e.inline || e.simple ? r.exec(n) : null;\n  });\n}\nfunction Tr(r) {\n  return function (n, e) {\n    return e.inline || e.simple ? null : r.exec(n);\n  };\n}\nfunction Mr(r) {\n  return jr(function (n) {\n    return r.exec(n);\n  });\n}\nvar wr = /(javascript|vbscript|data(?!:image)):/i;\nfunction Dr(r) {\n  try {\n    var n = decodeURIComponent(r).replace(/[^A-Za-z0-9/:]/g, \"\");\n    if (wr.test(n)) return null;\n  } catch (r) {\n    return null;\n  }\n  return r;\n}\nfunction Fr(r) {\n  return r ? r.replace(tr, \"$1\") : r;\n}\nfunction Pr(r, n, e) {\n  var t = e.inline || !1,\n    u = e.simple || !1;\n  e.inline = !0, e.simple = !0;\n  var a = r(n, e);\n  return e.inline = t, e.simple = u, a;\n}\nfunction Zr(r, n, e) {\n  var t = e.inline || !1,\n    u = e.simple || !1;\n  e.inline = !1, e.simple = !0;\n  var a = r(n, e);\n  return e.inline = t, e.simple = u, a;\n}\nfunction Nr(r, n, e) {\n  var t = e.inline || !1;\n  e.inline = !1;\n  var u = r(n, e);\n  return e.inline = t, u;\n}\nvar Gr = function (r, n, e) {\n  return {\n    children: Pr(n, r[2], e)\n  };\n};\nfunction Ur() {\n  return {};\n}\nfunction Vr() {\n  return null;\n}\nfunction Hr() {\n  return [].slice.call(arguments).filter(Boolean).join(\" \");\n}\nfunction Qr(r, n, e) {\n  for (var t = r, u = n.split(\".\"); u.length && void 0 !== (t = t[u[0]]);) u.shift();\n  return t || e;\n}\nfunction Wr(r, n) {\n  var e = Qr(n, r);\n  return e ? \"function\" == typeof e || \"object\" == typeof e && \"render\" in e ? e : Qr(n, r + \".component\", r) : r;\n}\nfunction Jr(e, t) {\n  var l;\n  void 0 === e && (e = \"\"), void 0 === t && (t = {}), t.overrides = t.overrides || {}, t.namedCodesToUnicode = t.namedCodesToUnicode ? n({}, a, t.namedCodesToUnicode) : a;\n  var V = t.slugify || Ar,\n    H = t.sanitizer || Dr,\n    Q = t.createElement || r.createElement,\n    W = [_, y, h, t.enforceAtxHeadings ? E : $, A, D, kr, xr],\n    J = [].concat(W, [F, R, L, j]);\n  function tr(r, e) {\n    var u = Qr(t.overrides, r + \".props\", {});\n    return Q.apply(void 0, [Wr(r, t.overrides), n({}, e, u, {\n      className: Hr(null == e ? void 0 : e.className, u.className) || void 0\n    })].concat([].slice.call(arguments, 2)));\n  }\n  function or(r) {\n    r = r.replace(S, \"\");\n    var n = !1;\n    t.forceInline ? n = !0 : t.forceBlock || (n = !1 === G.test(r));\n    for (var e = pr(sr(n ? r : zr(r).replace(ar, \"\") + \"\\n\\n\", {\n      inline: n\n    })); \"string\" == typeof e[e.length - 1] && !e[e.length - 1].trim();) e.pop();\n    if (null === t.wrapper) return e;\n    var u,\n      a = t.wrapper || (n ? \"span\" : \"div\");\n    if (e.length > 1 || t.forceWrapper) u = e;else {\n      if (1 === e.length) return \"string\" == typeof (u = e[0]) ? tr(\"span\", {\n        key: \"outer\"\n      }, u) : u;\n      u = null;\n    }\n    return Q(a, {\n      key: \"outer\"\n    }, u);\n  }\n  function cr(r, n) {\n    if (!n || !n.trim()) return null;\n    var e = n.match(c);\n    return e ? e.reduce(function (n, e) {\n      var t = e.indexOf(\"=\");\n      if (-1 !== t) {\n        var a = function (r) {\n            return -1 !== r.indexOf(\"-\") && null === r.match(O) && (r = r.replace(w, function (r, n) {\n              return n.toUpperCase();\n            })), r;\n          }(e.slice(0, t)).trim(),\n          i = function (r) {\n            var n = r[0];\n            return ('\"' === n || \"'\" === n) && r.length >= 2 && r[r.length - 1] === n ? r.slice(1, -1) : r;\n          }(e.slice(t + 1).trim()),\n          c = u[a] || a;\n        if (\"ref\" === c) return n;\n        var f = n[c] = function (r, n, e, t) {\n          return \"style\" === n ? function (r) {\n            var n = [],\n              e = \"\",\n              t = !1,\n              u = !1,\n              a = \"\";\n            if (!r) return n;\n            for (var i = 0; i < r.length; i++) {\n              var o = r[i];\n              if ('\"' !== o && \"'\" !== o || t || (u ? o === a && (u = !1, a = \"\") : (u = !0, a = o)), \"(\" === o && e.endsWith(\"url\") ? t = !0 : \")\" === o && t && (t = !1), \";\" !== o || u || t) e += o;else {\n                var c = e.trim();\n                if (c) {\n                  var f = c.indexOf(\":\");\n                  if (f > 0) {\n                    var l = c.slice(0, f).trim(),\n                      _ = c.slice(f + 1).trim();\n                    n.push([l, _]);\n                  }\n                }\n                e = \"\";\n              }\n            }\n            var d = e.trim();\n            if (d) {\n              var s = d.indexOf(\":\");\n              if (s > 0) {\n                var p = d.slice(0, s).trim(),\n                  v = d.slice(s + 1).trim();\n                n.push([p, v]);\n              }\n            }\n            return n;\n          }(e).reduce(function (n, e) {\n            var u = e[0],\n              a = e[1];\n            return n[u.replace(/(-[a-z])/g, function (r) {\n              return r[1].toUpperCase();\n            })] = t(a, r, u), n;\n          }, {}) : -1 !== o.indexOf(n) ? t(Fr(e), r, n) : (e.match(C) && (e = Fr(e.slice(1, e.length - 1))), \"true\" === e || \"false\" !== e && e);\n        }(r, a, i, H);\n        \"string\" == typeof f && (R.test(f) || j.test(f)) && (n[c] = or(f.trim()));\n      } else \"style\" !== e && (n[u[e] || e] = !0);\n      return n;\n    }, {}) : null;\n  }\n  var fr = [],\n    lr = {},\n    _r = ((l = {})[0] = {\n      t: [\">\"],\n      u: Tr(_),\n      i: 1,\n      o: function (r, n, e) {\n        var t = r[0].replace(d, \"\").match(s);\n        return {\n          alert: t[1],\n          children: n(t[2], e)\n        };\n      },\n      l: function (r, n, e) {\n        var t = {\n          key: e.key\n        };\n        return r.alert && (t.className = \"markdown-alert-\" + V(r.alert.toLowerCase(), Ar), r.children.unshift({\n          attrs: {},\n          children: [{\n            type: \"27\",\n            text: r.alert\n          }],\n          noInnerParse: !0,\n          type: \"11\",\n          tag: \"header\"\n        })), tr(\"blockquote\", t, n(r.children, e));\n      }\n    }, l[1] = {\n      u: Mr(p),\n      i: 1,\n      o: Ur,\n      l: function (r, n, e) {\n        return tr(\"br\", {\n          key: e.key\n        });\n      }\n    }, l[2] = {\n      t: function (r) {\n        var n = r[0];\n        return \"-\" === n || \"*\" === n || \"_\" === n;\n      },\n      u: Tr(v),\n      i: 1,\n      o: Ur,\n      l: function (r, n, e) {\n        return tr(\"hr\", {\n          key: e.key\n        });\n      }\n    }, l[3] = {\n      t: [\"    \"],\n      u: Tr(h),\n      i: 0,\n      o: function (r) {\n        return {\n          lang: void 0,\n          text: Fr(zr(r[0].replace(/^ {4}/gm, \"\")))\n        };\n      },\n      l: function (r, e, t) {\n        return tr(\"pre\", {\n          key: t.key\n        }, tr(\"code\", n({}, r.attrs, {\n          className: r.lang ? \"lang-\" + r.lang : \"\"\n        }), r.text));\n      }\n    }, l[4] = {\n      t: [\"```\", \"~~~\"],\n      u: Tr(y),\n      i: 0,\n      o: function (r) {\n        return {\n          attrs: cr(\"code\", r[3] || \"\"),\n          lang: r[2] || void 0,\n          text: r[4],\n          type: \"3\"\n        };\n      }\n    }, l[5] = {\n      t: [\"`\"],\n      u: Ir(g),\n      i: 3,\n      o: function (r) {\n        return {\n          text: Fr(r[2])\n        };\n      },\n      l: function (r, n, e) {\n        return tr(\"code\", {\n          key: e.key\n        }, r.text);\n      }\n    }, l[6] = {\n      t: [\"[^\"],\n      u: Tr(x),\n      i: 0,\n      o: function (r) {\n        return fr.push({\n          footnote: r[2],\n          identifier: r[1]\n        }), {};\n      },\n      l: Vr\n    }, l[7] = {\n      t: [\"[^\"],\n      u: Cr(q),\n      i: 1,\n      o: function (r) {\n        return {\n          target: \"#\" + V(r[1], Ar),\n          text: r[1]\n        };\n      },\n      l: function (r, n, e) {\n        return tr(\"a\", {\n          key: e.key,\n          href: H(r.target, \"a\", \"href\")\n        }, tr(\"sup\", {\n          key: e.key\n        }, r.text));\n      }\n    }, l[8] = {\n      t: [\"[ ]\", \"[x]\"],\n      u: Cr(z),\n      i: 1,\n      o: function (r) {\n        return {\n          completed: \"x\" === r[1].toLowerCase()\n        };\n      },\n      l: function (r, n, e) {\n        return tr(\"input\", {\n          checked: r.completed,\n          key: e.key,\n          readOnly: !0,\n          type: \"checkbox\"\n        });\n      }\n    }, l[9] = {\n      t: [\"#\"],\n      u: Tr(t.enforceAtxHeadings ? E : $),\n      i: 1,\n      o: function (r, n, e) {\n        return {\n          children: Pr(n, r[2], e),\n          id: V(r[2], Ar),\n          level: r[1].length\n        };\n      },\n      l: function (r, n, e) {\n        return tr(\"h\" + r.level, {\n          id: r.id,\n          key: e.key\n        }, n(r.children, e));\n      }\n    }, l[10] = {\n      u: Tr(A),\n      i: 0,\n      o: function (r, n, e) {\n        return {\n          children: Pr(n, r[1], e),\n          level: \"=\" === r[2] ? 1 : 2,\n          type: \"9\"\n        };\n      }\n    }, l[11] = {\n      t: [\"<\"],\n      u: Mr(R),\n      i: 1,\n      o: function (r, n, e) {\n        var t,\n          u = r[3].match(ir),\n          a = RegExp(\"^\" + u[1], \"gm\"),\n          o = r[3].replace(a, \"\"),\n          c = (t = o, J.some(function (r) {\n            return r.test(t);\n          }) ? Nr : Pr),\n          f = r[1].toLowerCase(),\n          l = -1 !== i.indexOf(f),\n          _ = (l ? f : r[1]).trim(),\n          d = {\n            attrs: cr(_, r[2]),\n            noInnerParse: l,\n            tag: _\n          };\n        if (e.inAnchor = e.inAnchor || \"a\" === f, l) d.text = r[3];else {\n          var s = e.inHTML;\n          e.inHTML = !0, d.children = c(n, o, e), e.inHTML = s;\n        }\n        return e.inAnchor = !1, d;\n      },\n      l: function (r, e, t) {\n        return tr(r.tag, n({\n          key: t.key\n        }, r.attrs), r.text || (r.children ? e(r.children, t) : \"\"));\n      }\n    }, l[13] = {\n      t: [\"<\"],\n      u: Mr(j),\n      i: 1,\n      o: function (r) {\n        var n = r[1].trim();\n        return {\n          attrs: cr(n, r[2] || \"\"),\n          tag: n\n        };\n      },\n      l: function (r, e, t) {\n        return tr(r.tag, n({}, r.attrs, {\n          key: t.key\n        }));\n      }\n    }, l[12] = {\n      t: [\"\\x3c!--\"],\n      u: Mr(L),\n      i: 1,\n      o: function () {\n        return {};\n      },\n      l: Vr\n    }, l[14] = {\n      t: [\"![\"],\n      u: Ir(Sr),\n      i: 1,\n      o: function (r) {\n        return {\n          alt: Fr(r[1]),\n          target: Fr(r[2]),\n          title: Fr(r[3])\n        };\n      },\n      l: function (r, n, e) {\n        return tr(\"img\", {\n          key: e.key,\n          alt: r.alt || void 0,\n          title: r.title || void 0,\n          src: H(r.target, \"img\", \"src\")\n        });\n      }\n    }, l[15] = {\n      t: [\"[\"],\n      u: Cr(br),\n      i: 3,\n      o: function (r, n, e) {\n        return {\n          children: Zr(n, r[1], e),\n          target: Fr(r[2]),\n          title: Fr(r[3])\n        };\n      },\n      l: function (r, n, e) {\n        return tr(\"a\", {\n          key: e.key,\n          href: H(r.target, \"a\", \"href\"),\n          title: r.title\n        }, n(r.children, e));\n      }\n    }, l[16] = {\n      t: [\"<\"],\n      u: Cr(M),\n      i: 0,\n      o: function (r) {\n        return {\n          children: [{\n            text: r[1],\n            type: \"27\"\n          }],\n          target: r[1],\n          type: \"15\"\n        };\n      }\n    }, l[17] = {\n      t: function (r, n) {\n        return !n.inAnchor && !t.disableAutoLink && ($r(r, \"http://\") || $r(r, \"https://\"));\n      },\n      u: Cr(I),\n      i: 0,\n      o: function (r) {\n        return {\n          children: [{\n            text: r[1],\n            type: \"27\"\n          }],\n          target: r[1],\n          title: void 0,\n          type: \"15\"\n        };\n      }\n    }, l[18] = {\n      t: [\"<\"],\n      u: Cr(T),\n      i: 0,\n      o: function (r) {\n        var n = r[1],\n          e = r[1];\n        return f.test(e) || (e = \"mailto:\" + e), {\n          children: [{\n            text: n.replace(\"mailto:\", \"\"),\n            type: \"27\"\n          }],\n          target: e,\n          type: \"15\"\n        };\n      }\n    }, l[20] = qr(tr, 1), l[33] = qr(tr, 2), l[19] = {\n      u: Tr(m),\n      i: 3,\n      o: Ur,\n      l: function () {\n        return \"\\n\";\n      }\n    }, l[21] = {\n      u: jr(function (r, n) {\n        if (n.inline || n.simple || n.inHTML && -1 === r.indexOf(\"\\n\\n\") && -1 === n.prevCapture.indexOf(\"\\n\\n\")) return null;\n        var e = \"\";\n        r.split(\"\\n\").every(function (r) {\n          return r += \"\\n\", !W.some(function (n) {\n            return n.test(r);\n          }) && (e += r, !!r.trim());\n        });\n        var t = zr(e);\n        return \"\" === t ? null : [e,, t];\n      }),\n      i: 3,\n      o: Gr,\n      l: function (r, n, e) {\n        return tr(\"p\", {\n          key: e.key\n        }, n(r.children, e));\n      }\n    }, l[22] = {\n      t: [\"[\"],\n      u: Cr(P),\n      i: 0,\n      o: function (r) {\n        return lr[r[1]] = {\n          target: r[2],\n          title: r[4]\n        }, {};\n      },\n      l: Vr\n    }, l[23] = {\n      t: [\"![\"],\n      u: Ir(Z),\n      i: 0,\n      o: function (r) {\n        return {\n          alt: r[1] ? Fr(r[1]) : void 0,\n          ref: r[2]\n        };\n      },\n      l: function (r, n, e) {\n        return lr[r.ref] ? tr(\"img\", {\n          key: e.key,\n          alt: r.alt,\n          src: H(lr[r.ref].target, \"img\", \"src\"),\n          title: lr[r.ref].title\n        }) : null;\n      }\n    }, l[24] = {\n      t: function (r) {\n        return \"[\" === r[0] && -1 === r.indexOf(\"](\");\n      },\n      u: Cr(N),\n      i: 0,\n      o: function (r, n, e) {\n        return {\n          children: n(r[1], e),\n          fallbackChildren: r[0],\n          ref: r[2]\n        };\n      },\n      l: function (r, n, e) {\n        return lr[r.ref] ? tr(\"a\", {\n          key: e.key,\n          href: H(lr[r.ref].target, \"a\", \"href\"),\n          title: lr[r.ref].title\n        }, n(r.children, e)) : tr(\"span\", {\n          key: e.key\n        }, r.fallbackChildren);\n      }\n    }, l[25] = {\n      t: [\"|\"],\n      u: Tr(D),\n      i: 1,\n      o: Lr,\n      l: function (r, n, e) {\n        var t = r;\n        return tr(\"table\", {\n          key: e.key\n        }, tr(\"thead\", null, tr(\"tr\", null, t.header.map(function (r, u) {\n          return tr(\"th\", {\n            key: u,\n            style: Or(t, u)\n          }, n(r, e));\n        }))), tr(\"tbody\", null, t.cells.map(function (r, u) {\n          return tr(\"tr\", {\n            key: u\n          }, r.map(function (r, u) {\n            return tr(\"td\", {\n              key: u,\n              style: Or(t, u)\n            }, n(r, e));\n          }));\n        })));\n      }\n    }, l[27] = {\n      u: jr(function (r, n) {\n        var e;\n        return $r(r, \":\") && (e = nr.exec(r)), e || ur.exec(r);\n      }),\n      i: 4,\n      o: function (r) {\n        var n = r[0];\n        return {\n          text: -1 === n.indexOf(\"&\") ? n : n.replace(B, function (r, n) {\n            return t.namedCodesToUnicode[n] || r;\n          })\n        };\n      },\n      l: function (r) {\n        return r.text;\n      }\n    }, l[28] = {\n      t: [\"**\", \"__\"],\n      u: Ir(K),\n      i: 2,\n      o: function (r, n, e) {\n        return {\n          children: n(r[2], e)\n        };\n      },\n      l: function (r, n, e) {\n        return tr(\"strong\", {\n          key: e.key\n        }, n(r.children, e));\n      }\n    }, l[29] = {\n      t: function (r) {\n        var n = r[0];\n        return (\"*\" === n || \"_\" === n) && r[1] !== n;\n      },\n      u: Ir(X),\n      i: 3,\n      o: function (r, n, e) {\n        return {\n          children: n(r[2], e)\n        };\n      },\n      l: function (r, n, e) {\n        return tr(\"em\", {\n          key: e.key\n        }, n(r.children, e));\n      }\n    }, l[30] = {\n      t: [\"\\\\\"],\n      u: Ir(er),\n      i: 1,\n      o: function (r) {\n        return {\n          text: r[1],\n          type: \"27\"\n        };\n      }\n    }, l[31] = {\n      t: [\"==\"],\n      u: Ir(Y),\n      i: 3,\n      o: Gr,\n      l: function (r, n, e) {\n        return tr(\"mark\", {\n          key: e.key\n        }, n(r.children, e));\n      }\n    }, l[32] = {\n      t: [\"~~\"],\n      u: Ir(rr),\n      i: 3,\n      o: Gr,\n      l: function (r, n, e) {\n        return tr(\"del\", {\n          key: e.key\n        }, n(r.children, e));\n      }\n    }, l);\n  !0 === t.disableParsingRawHTML && (delete _r[11], delete _r[13]);\n  var dr,\n    sr = function (r) {\n      var n = Object.keys(r);\n      function e(t, u) {\n        var a = [];\n        if (u.prevCapture = u.prevCapture || \"\", t.trim()) for (; t;) for (var i = 0; i < n.length;) {\n          var o = n[i],\n            c = r[o];\n          if (!c.t || Er(t, u, c.t)) {\n            var f = c.u(t, u);\n            if (f && f[0]) {\n              t = t.substring(f[0].length);\n              var l = c.o(f, e, u);\n              u.prevCapture += f[0], l.type || (l.type = o), a.push(l);\n              break;\n            }\n            i++;\n          } else i++;\n        }\n        return u.prevCapture = \"\", a;\n      }\n      return n.sort(function (n, e) {\n        return r[n].i - r[e].i || (n < e ? -1 : 1);\n      }), function (r, n) {\n        return e(function (r) {\n          return r.replace(k, \"\\n\").replace(b, \"\").replace(U, \"    \");\n        }(r), n);\n      };\n    }(_r),\n    pr = (dr = function (r, n) {\n      return function (e, t, u) {\n        var a = r[e.type].l;\n        return n ? n(function () {\n          return a(e, t, u);\n        }, e, t, u) : a(e, t, u);\n      };\n    }(_r, t.renderRule), function r(n, e) {\n      if (void 0 === e && (e = {}), Array.isArray(n)) {\n        for (var t = e.key, u = [], a = !1, i = 0; i < n.length; i++) {\n          e.key = i;\n          var o = r(n[i], e),\n            c = \"string\" == typeof o;\n          c && a ? u[u.length - 1] += o : null !== o && u.push(o), a = c;\n        }\n        return e.key = t, u;\n      }\n      return dr(n, r, e);\n    }),\n    vr = or(e);\n  return fr.length ? tr(\"div\", null, vr, tr(\"footer\", {\n    key: \"footer\"\n  }, fr.map(function (r) {\n    return tr(\"div\", {\n      id: V(r.identifier, Ar),\n      key: r.identifier\n    }, r.identifier, pr(sr(r.footnote, {\n      inline: !0\n    })));\n  }))) : vr;\n}\nexport default function (n) {\n  var t = n.children,\n    u = void 0 === t ? \"\" : t,\n    a = n.options,\n    i = function (r, n) {\n      if (null == r) return {};\n      var e,\n        t,\n        u = {},\n        a = Object.keys(r);\n      for (t = 0; t < a.length; t++) n.indexOf(e = a[t]) >= 0 || (u[e] = r[e]);\n      return u;\n    }(n, e);\n  return r.cloneElement(Jr(u, a), i);\n}\nexport { t as RuleType, Jr as compiler, Dr as sanitizer, Ar as slugify };","map":{"version":3,"sources":["../index.tsx"],"names":["RuleType","blockQuote","breakLine","breakThematic","codeBlock","codeFenced","codeInline","footnote","footnoteReference","gfmTask","heading","headingSetext","htmlBlock","htmlComment","htmlSelfClosing","image","link","linkAngleBraceStyleDetector","linkBareUrlDetector","linkMailtoDetector","newlineCoalescer","orderedList","paragraph","ref","refImage","refLink","table","tableSeparator","text","textBolded","textEmphasized","textEscaped","textMarked","textStrikethroughed","unorderedList","ATTRIBUTE_TO_JSX_PROP_MAP","reduce","obj","x","toLowerCase","class","for","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTRIBUTES_TO_SANITIZE","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BLOCKQUOTE_ALERT_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","FRONT_MATTER_R","GFM_TASK_R","HEADING_R","HEADING_ATX_COMPLIANT_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","PARAGRAPH_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_TRIM_PIPES","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","INLINE_SKIP_R","TEXT_BOLD_R","RegExp","TEXT_EMPHASIZED_R","TEXT_MARKED_R","TEXT_STRIKETHROUGHED_R","SHORTCODE_R","TEXT_ESCAPED_R","UNESCAPE_R","TEXT_PLAIN_R","TRIM_STARTING_NEWLINES","HTML_LEFT_TRIM_AMOUNT_R","LIST_LOOKBEHIND_R","ORDERED_LIST_BULLET","UNORDERED_LIST_BULLET","generateListItemPrefix","type","ORDERED_LIST_ITEM_PREFIX","UNORDERED_LIST_ITEM_PREFIX","generateListItemPrefixRegex","ORDERED_LIST_ITEM_PREFIX_R","UNORDERED_LIST_ITEM_PREFIX_R","generateListItemRegex","ORDERED_LIST_ITEM_R","UNORDERED_LIST_ITEM_R","generateListRegex","bullet","ORDERED_LIST_R","UNORDERED_LIST_R","generateListRule","h","ordered","LIST_R","LIST_ITEM_R","LIST_ITEM_PREFIX_R","_qualify","test","source","_match","allowInline","state","isStartOfLine","exec","prevCapture","list","inline","simple","_order","_parse","capture","parse","start","undefined","items","replace","match","lastItemWasAParagraph","map","item","i","space","length","spaceRegex","content","isLastItem","indexOf","thisItemIsAParagraph","oldStateInline","oldStateList","adjustedContent","trimEnd","result","_render","node","output","key","LINK_R","IMAGE_R","str","end","slice","startsWith","prefix","qualifies","qualify","Array","isArray","first","slugify","parseTableAlignCapture","alignCapture","parseTableRow","tableOutput","prevInTable","inTable","cells","acc","flush","cell","push","apply","trim","split","filter","Boolean","forEach","fragment","arr","rowText","parseTable","align","parseTableCells","header","children","getTableStyle","colIndex","textAlign","_","letter","toUpperCase","styleString","styles","buffer","inUrl","inQuotes","quoteChar","char","endsWith","declaration","colonIndex","value","tag","sanitizeUrlFn","parseStyleAttribute","_ref","substr","unescape","rules","ruleList","Object","keys","sort","a","b","nestedParse","ruleType","rule","substring","parsed","normalizeWhitespace","fn","inlineRegex","regex","simpleInlineRegex","blockRegex","anyScopeRegex","SANITIZE_R","sanitizer","input","decoded","decodeURIComponent","e","rawString","parseInline","isCurrentlyInline","isCurrentlySimple","parseSimpleInline","parseBlock","parseCaptureInline","captureNothing","renderNothing","render","patchedRender","ast","oldKey","lastWasString","nodeOut","isString","userRender","renderer","cx","join","get","src","path","fb","ptr","frags","shift","getTag","overrides","override","compiler","markdown","options","_extends","slug","sanitize","createElement","React","NON_PARAGRAPH_BLOCK_SYNTAXES","enforceAtxHeadings","BLOCK_SYNTAXES","concat","some","r","inHTML","every","line","captured","props","overrideProps","className","compile","forceInline","forceBlock","emitter","parser","pop","wrapper","jsx","forceWrapper","attrStringToMap","attributes","raw","delimiterIdx","normalizeAttributeKey","unquote","mappedKey","normalizedValue","attributeValueToJSXPropValue","footnotes","refs","_rules","_capture$0$replace$ma","alert","unshift","attrs","noInnerParse","__","lang","identifier","target","href","completed","checked","readOnly","id","level","_capture$3$match","trimmer","trimmed","parseFunc","tagName","inAnchor","prevInHTML","alt","title","disableAutoLink","address","fallbackChildren","style","row","c","ret","full","inner","disableParsingRawHTML","parserFor","createRenderer","renderRule","def","_ref2","_ref2$children","_objectWithoutPropertiesLoose","cloneElement"],"mappings":"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","sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const RuleType = {\n  blockQuote: '0',\n  breakLine: '1',\n  breakThematic: '2',\n  codeBlock: '3',\n  codeFenced: '4',\n  codeInline: '5',\n  footnote: '6',\n  footnoteReference: '7',\n  gfmTask: '8',\n  heading: '9',\n  headingSetext: '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock: '11',\n  htmlComment: '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing: '13',\n  image: '14',\n  link: '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector: '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector: '17',\n  /** emits a `link` 'node', does not render directly */\n  linkMailtoDetector: '18',\n  newlineCoalescer: '19',\n  orderedList: '20',\n  paragraph: '21',\n  ref: '22',\n  refImage: '23',\n  refLink: '24',\n  table: '25',\n  tableSeparator: '26',\n  text: '27',\n  textBolded: '28',\n  textEmphasized: '29',\n  textEscaped: '30',\n  textMarked: '31',\n  textStrikethroughed: '32',\n  unorderedList: '33',\n} as const\n\nif (process.env.NODE_ENV === 'test') {\n  Object.keys(RuleType).forEach(key => (RuleType[key] = key))\n}\n\nexport type RuleType = (typeof RuleType)[keyof typeof RuleType]\n\nconst Priority = {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX: 0,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH: 1,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED: 2,\n  /**\n   * inline elements\n   */\n  LOW: 3,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN: 4,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { class: 'className', for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script', 'pre']\nconst ATTRIBUTES_TO_SANITIZE = [\n  'src',\n  'href',\n  'data',\n  'formAction',\n  'srcDoc',\n  'action',\n]\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^(\\s*>[\\s\\S]*?)(?=\\n\\n|$)/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BLOCKQUOTE_ALERT_R = /^(?:\\[!([^\\]]*)\\]\\n)?([\\s\\S]*)/\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^(?: {1,3})?(`{3,}|~{3,}) *(\\S+)? *([^\\n]*?)?\\n([\\s\\S]*?)(?:\\1\\n?|$)/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)((?:\\\\`|(?!\\1)`|[^`])+)\\1/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\n\n/**\n * Matches footnotes on the format:\n *\n * [^key]: value\n *\n * Matches multiline footnotes\n *\n * [^key]: row\n * row\n * row\n *\n * And empty lines in indented multiline footnotes\n *\n * [^key]: indented with\n *     row\n *\n *     row\n *\n * Explanation:\n *\n * 1. Look for the starting tag, eg: [^key]\n *    ^\\[\\^([^\\]]+)]\n *\n * 2. The first line starts with a colon, and continues for the rest of the line\n *   :(.*)\n *\n * 3. Parse as many additional lines as possible. Matches new non-empty lines that doesn't begin with a new footnote definition.\n *    (\\n(?!\\[\\^).+)\n *\n * 4. ...or allows for repeated newlines if the next line begins with at least four whitespaces.\n *    (\\n+ {4,}.*)\n */\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/\n\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst FRONT_MATTER_R = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\n/**\n * For inline formatting, this partial attempts to ignore characters that\n * may appear in nested formatting that could prematurely trigger detection\n * and therefore miss content that should have been included.\n */\nconst INLINE_SKIP_R =\n  '((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|\\\\\\\\\\\\1|[\\\\s\\\\S])+?)'\n\n/**\n * Detect a sequence like **foo** or __foo__. Note that bold has a higher priority\n * than emphasized to support nesting of both since they share a delimiter.\n */\nconst TEXT_BOLD_R = new RegExp(`^([*_])\\\\1${INLINE_SKIP_R}\\\\1\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like *foo* or _foo_.\n */\nconst TEXT_EMPHASIZED_R = new RegExp(`^([*_])${INLINE_SKIP_R}\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like ==foo==.\n */\nconst TEXT_MARKED_R = new RegExp(`^(==)${INLINE_SKIP_R}\\\\1`)\n\n/**\n * Detect a sequence like ~~foo~~.\n */\nconst TEXT_STRIKETHROUGHED_R = new RegExp(`^(~~)${INLINE_SKIP_R}\\\\1`)\n\n/**\n * Special case for shortcodes like :big-smile: or :emoji:\n */\nconst SHORTCODE_R = /^(:[a-zA-Z0-9-_]+:)/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst UNESCAPE_R = /\\\\([^0-9A-Za-z\\s])/g\n\n/**\n * Always take the first character, then eagerly take text until a double space\n * (potential line break) or some markdown-like punctuation is reached.\n */\nconst TEXT_PLAIN_R = /^[\\s\\S](?:(?!  \\n|[0-9]\\.|http)[^=*_~\\-\\n:<`\\\\\\[!])*/\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    _qualify: source => LIST_ITEM_PREFIX_R.test(source),\n    _match: allowInline(function (source, state) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(state.prevCapture)\n      const isListAllowed = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListAllowed) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    }),\n    _order: Priority.HIGH,\n    _parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for delta afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = trimEnd(content) + '\\n\\n'\n        } else {\n          state.inline = true\n          adjustedContent = trimEnd(content)\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    _render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\[\\\\]]*(?:\\\\[[^\\\\[\\\\]]*\\\\][^\\\\[\\\\]]*)*\\\\]|[^\\\\[\\\\]])*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\nconst IMAGE_R = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nfunction trimEnd(str: string) {\n  let end = str.length\n  while (end > 0 && str[end - 1] <= ' ') end--\n  return str.slice(0, end)\n}\n\nfunction startsWith(str: string, prefix: string) {\n  return str.startsWith(prefix)\n}\n\nfunction qualifies(\n  source: string,\n  state: MarkdownToJSX.State,\n  qualify: MarkdownToJSX.Rule<any>['_qualify']\n) {\n  if (Array.isArray(qualify)) {\n    for (let i = 0; i < qualify.length; i++) {\n      if (startsWith(source, qualify[i])) return true\n    }\n\n    return false\n  }\n\n  return qualify(source, state)\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nexport function slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State,\n  tableOutput: boolean\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n\n  state.inTable = true\n\n  let cells: MarkdownToJSX.ParserResult[][] = [[]]\n  let acc = ''\n\n  function flush() {\n    if (!acc) return\n\n    const cell = cells[cells.length - 1]\n    cell.push.apply(cell, parse(acc, state))\n    acc = ''\n  }\n\n  source\n    .trim()\n    // isolate situations where a pipe should be ignored (inline code, escaped, etc)\n    .split(/(`[^`]*`|\\\\\\||\\|)/)\n    .filter(Boolean)\n    .forEach((fragment, i, arr) => {\n      if (fragment.trim() === '|') {\n        flush()\n\n        if (tableOutput) {\n          if (i !== 0 && i !== arr.length - 1) {\n            // Split the current row\n            cells.push([])\n          }\n\n          return\n        }\n      }\n\n      acc += fragment\n    })\n\n  flush()\n\n  state.inTable = prevInTable\n\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state, true)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  /**\n   * The table syntax makes some other parsing angry so as a bit of a hack even if alignment and/or cell rows are missing,\n   * we'll still run a detected first row through the parser and then just emit a paragraph.\n   */\n  state.inline = true\n  const align = capture[2] ? parseTableAlign(capture[2]) : []\n  const cells = capture[3] ? parseTableCells(capture[3], parse, state) : []\n  const header = parseTableRow(capture[1], parse, state, !!cells.length)\n  state.inline = false\n\n  return cells.length\n    ? {\n        align: align,\n        cells: cells,\n        header: header,\n        type: RuleType.table,\n      }\n    : {\n        children: header,\n        type: RuleType.paragraph,\n      }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\ntype StyleTuple = [key: string, value: string]\n\nfunction parseStyleAttribute(styleString: string): StyleTuple[] {\n  const styles: StyleTuple[] = []\n  let buffer = ''\n  let inUrl = false\n  let inQuotes = false\n  let quoteChar: '\"' | \"'\" | '' = ''\n\n  if (!styleString) return styles\n\n  for (let i = 0; i < styleString.length; i++) {\n    const char = styleString[i]\n\n    // Handle quotes\n    if ((char === '\"' || char === \"'\") && !inUrl) {\n      if (!inQuotes) {\n        inQuotes = true\n        quoteChar = char\n      } else if (char === quoteChar) {\n        inQuotes = false\n        quoteChar = ''\n      }\n    }\n\n    // Track url() values\n    if (char === '(' && buffer.endsWith('url')) {\n      inUrl = true\n    } else if (char === ')' && inUrl) {\n      inUrl = false\n    }\n\n    // Only split on semicolons when not in quotes or url()\n    if (char === ';' && !inQuotes && !inUrl) {\n      const declaration = buffer.trim()\n      if (declaration) {\n        const colonIndex = declaration.indexOf(':')\n        if (colonIndex > 0) {\n          const key = declaration.slice(0, colonIndex).trim()\n          const value = declaration.slice(colonIndex + 1).trim()\n          styles.push([key, value])\n        }\n      }\n      buffer = ''\n    } else {\n      buffer += char\n    }\n  }\n\n  // Handle the last declaration\n  const declaration = buffer.trim()\n  if (declaration) {\n    const colonIndex = declaration.indexOf(':')\n    if (colonIndex > 0) {\n      const key = declaration.slice(0, colonIndex).trim()\n      const value = declaration.slice(colonIndex + 1).trim()\n      styles.push([key, value])\n    }\n  }\n\n  return styles\n}\n\nfunction attributeValueToJSXPropValue(\n  tag: MarkdownToJSX.HTMLTags,\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string,\n  sanitizeUrlFn: MarkdownToJSX.Options['sanitizer']\n): any {\n  if (key === 'style') {\n    return parseStyleAttribute(value).reduce(function (styles, [key, value]) {\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = sanitizeUrlFn(value, tag, key)\n\n      return styles\n    }, {})\n  } else if (ATTRIBUTES_TO_SANITIZE.indexOf(key) !== -1) {\n    return sanitizeUrlFn(unescape(value), tag, key)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = unescape(value.slice(1, value.length - 1))\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  var ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      const order = rules[type]._order\n      if (typeof order !== 'number' || !isFinite(order)) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  ruleList.sort(function (a, b) {\n    return rules[a]._order - rules[b]._order || (a < b ? -1 : 1)\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    var result = []\n    state.prevCapture = state.prevCapture || ''\n\n    if (source.trim()) {\n      while (source) {\n        var i = 0\n        while (i < ruleList.length) {\n          var ruleType = ruleList[i]\n          var rule = rules[ruleType]\n\n          if (rule._qualify && !qualifies(source, state, rule._qualify)) {\n            i++\n            continue\n          }\n\n          var capture = rule._match(source, state)\n          if (capture && capture[0]) {\n            source = source.substring(capture[0].length)\n\n            var parsed = rule._parse(capture, nestedParse, state)\n\n            state.prevCapture += capture[0]\n\n            if (!parsed.type) parsed.type = ruleType as unknown as RuleType\n            result.push(parsed)\n            break\n          }\n          i++\n        }\n      }\n    }\n\n    // reset on exit\n    state.prevCapture = ''\n\n    return result\n  }\n\n  return function (source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n/**\n * Marks a matcher function as eligible for being run inside an inline context;\n * allows us to do a little less work in the nested parser.\n */\nfunction allowInline<T extends Function & { inline?: 0 | 1 }>(fn: T) {\n  fn.inline = 1\n\n  return fn\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return allowInline(function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  })\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return allowInline(function match(\n    source: string,\n    state: MarkdownToJSX.State\n  ) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  })\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return allowInline(function match(source: string /*, state*/) {\n    return regex.exec(source)\n  })\n}\n\nconst SANITIZE_R = /(javascript|vbscript|data(?!:image)):/i\n\nexport function sanitizer(input: string): string {\n  try {\n    const decoded = decodeURIComponent(input).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (SANITIZE_R.test(decoded)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Input contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Input could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        input\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return input\n}\n\nfunction unescape(rawString: string): string {\n  return rawString ? rawString.replace(UNESCAPE_R, '$1') : rawString\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  state.inline = false\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  return result\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[2], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction reactFor(render) {\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactNode[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return render(ast, patchedRender, state)\n  }\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  return function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactNode {\n    const renderer = rules[ast.type]._render as MarkdownToJSX.Rule['_render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string = '',\n  options: MarkdownToJSX.Options = {}\n): React.JSX.Element {\n  options.overrides = options.overrides || {}\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const slug = options.slugify || slugify\n  const sanitize = options.sanitizer || sanitizer\n  const createElement = options.createElement || React.createElement\n\n  const NON_PARAGRAPH_BLOCK_SYNTAXES = [\n    BLOCKQUOTE_R,\n    CODE_BLOCK_FENCED_R,\n    CODE_BLOCK_R,\n    options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R,\n    HEADING_SETEXT_R,\n    NP_TABLE_R,\n    ORDERED_LIST_R,\n    UNORDERED_LIST_R,\n  ]\n\n  const BLOCK_SYNTAXES = [\n    ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n    PARAGRAPH_R,\n    HTML_BLOCK_ELEMENT_R,\n    HTML_COMMENT_R,\n    HTML_SELF_CLOSING_ELEMENT_R,\n  ]\n\n  function containsBlockSyntax(input: string) {\n    return BLOCK_SYNTAXES.some(r => r.test(input))\n  }\n\n  function matchParagraph(source: string, state: MarkdownToJSX.State) {\n    if (\n      state.inline ||\n      state.simple ||\n      (state.inHTML &&\n        source.indexOf('\\n\\n') === -1 &&\n        state.prevCapture.indexOf('\\n\\n') === -1)\n    ) {\n      return null\n    }\n\n    let match = ''\n\n    source.split('\\n').every(line => {\n      line += '\\n'\n\n      // bail out on first sign of non-paragraph block\n      if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n        return false\n      }\n\n      match += line\n\n      return !!line.trim()\n    })\n\n    const captured = trimEnd(match)\n    if (captured === '') {\n      return null\n    }\n\n    // parseCaptureInline expects the inner content to be at index 2\n    // because index 1 is the delimiter for text formatting syntaxes\n    return [match, , captured] as RegExpMatchArray\n  }\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElement(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): React.JSX.Element {\n    input = input.replace(FRONT_MATTER_R, '')\n\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${trimEnd(input).replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return createElement(wrapper, { key: 'outer' }, jsx) as React.JSX.Element\n  }\n\n  function attrStringToMap(\n    tag: MarkdownToJSX.HTMLTags,\n    str: string\n  ): React.JSX.IntrinsicAttributes {\n    if (!str || !str.trim()) {\n      return null\n    }\n\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n\n        // bail out, not supported\n        if (mappedKey === 'ref') return map\n\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          tag,\n          key,\n          value,\n          sanitize\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = compile(normalizedValue.trim())\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      _qualify: ['>'],\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, alert, content] = capture[0]\n          .replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, '')\n          .match(BLOCKQUOTE_ALERT_R)\n\n        return {\n          alert,\n          children: parse(content, state),\n        }\n      },\n      _render(node, output, state) {\n        const props = {\n          key: state.key,\n        } as Record<string, unknown>\n\n        if (node.alert) {\n          props.className =\n            'markdown-alert-' + slug(node.alert.toLowerCase(), slugify)\n\n          node.children.unshift({\n            attrs: {},\n            children: [{ type: RuleType.text, text: node.alert }],\n            noInnerParse: true,\n            type: RuleType.htmlBlock,\n            tag: 'header',\n          })\n        }\n\n        return h('blockquote', props, output(node.children, state))\n      },\n    },\n\n    [RuleType.breakLine]: {\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      _qualify: source => {\n        const char = source[0]\n        return char === '-' || char === '*' || char === '_'\n      },\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      _qualify: ['    '],\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: unescape(trimEnd(capture[0].replace(/^ {4}/gm, ''))),\n        }\n      },\n\n      _render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      _qualify: ['```', '~~~'],\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap('code', capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4],\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      _qualify: ['`'],\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          text: unescape(capture[2]),\n        }\n      },\n      _render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      _qualify: ['[^'],\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      _render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      _qualify: ['[^'],\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          target: `#${slug(capture[1], slugify)}`,\n          text: capture[1],\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <a key={state.key} href={sanitize(node.target, 'a', 'href')}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      _qualify: ['[ ]', '[x]'],\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      _qualify: ['#'],\n      _match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: slug(capture[2], slugify),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      _render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      _qualify: ['<'],\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const tag = (\n          noInnerParse ? tagName : capture[1]\n        ).trim() as MarkdownToJSX.HTMLTags\n\n        const ast = {\n          attrs: attrStringToMap(tag, capture[2]),\n          noInnerParse: noInnerParse,\n          tag,\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          const prevInHTML = state.inHTML\n          state.inHTML = true\n          ast.children = parseFunc(parse, trimmed, state)\n          state.inHTML = prevInHTML\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      _render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || (node.children ? output(node.children, state) : '')}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      _qualify: ['<'],\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        const tag = capture[1].trim() as MarkdownToJSX.HTMLTags\n        return {\n          attrs: attrStringToMap(tag, capture[2] || ''),\n          tag,\n        }\n      },\n      _render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      _qualify: ['<!--'],\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      _qualify: ['!['],\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          alt: unescape(capture[1]),\n          target: unescape(capture[2]),\n          title: unescape(capture[3]),\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitize(node.target, 'img', 'src')}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      _qualify: ['['],\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescape(capture[2]),\n          title: unescape(capture[3]),\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <a\n            key={state.key}\n            href={sanitize(node.target, 'a', 'href')}\n            title={node.title}\n          >\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      _qualify: ['<'],\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      _qualify: (source, state) => {\n        if (state.inAnchor || options.disableAutoLink) return false\n        return startsWith(source, 'http://') || startsWith(source, 'https://')\n      },\n      _match: inlineRegex(LINK_AUTOLINK_BARE_URL_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkMailtoDetector]: {\n      _qualify: ['<'],\n      _match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          children: [\n            {\n              text: address.replace('mailto:', ''),\n              type: RuleType.text,\n            },\n          ],\n          target: target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      _match: allowInline(matchParagraph),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      _qualify: ['['],\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      _render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      _qualify: ['!['],\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          alt: capture[1] ? unescape(capture[1]) : undefined,\n          ref: capture[2],\n        }\n      },\n      _render(node, output, state) {\n        return refs[node.ref] ? (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitize(refs[node.ref].target, 'img', 'src')}\n            title={refs[node.ref].title}\n          />\n        ) : null\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      _qualify: (source) => source[0] === '[' && source.indexOf('](') === -1,\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: capture[0],\n          ref: capture[2],\n        }\n      },\n      _render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitize(refs[node.ref].target, 'a', 'href')}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{node.fallbackChildren}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      _qualify: ['|'],\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _render(node, output, state) {\n        const table = node as MarkdownToJSX.TableNode\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {table.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(table, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {table.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(table, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: allowInline(function (source, state) {\n        let ret\n        if (startsWith(source, ':')) ret = SHORTCODE_R.exec(source)\n        if (ret) return ret\n\n        return TEXT_PLAIN_R.exec(source)\n      }),\n      _order: Priority.MIN,\n      _parse(capture) {\n        const text = capture[0]\n        return {\n          text:\n            text.indexOf('&') === -1\n              ? text\n              : text.replace(\n                  HTML_CHAR_CODE_R,\n                  (full, inner) => options.namedCodesToUnicode[inner] || full\n                ),\n        }\n      },\n      _render(node) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      _qualify: ['**', '__'],\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      _render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      _qualify: source => {\n        const char = source[0]\n        return (char === '*' || char === '_') && source[1] !== char\n      },\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      _render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      _qualify: ['\\\\'],\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      _qualify: ['=='],\n      _match: simpleInlineRegex(TEXT_MARKED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      _qualify: ['~~'],\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { _match: match, parse: parse } = rules[key]\n\n  //   // rules[key].match = (...args) => {\n  //   //   const start = performance.now()\n  //   //   const result = match(...args)\n  //   //   const delta = performance.now() - start\n\n  //   //   if (delta > 5)\n  //   //     console.warn(\n  //   //       `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //   //     )\n\n  //   //   return result\n  //   // }\n\n  //   rules[key].parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5) {\n  //       console.warn(\n  //         `Slow parse for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n  //     }\n\n  //     // console[delta > 5 ? 'warn' : 'log'](\n  //     //   `${key}:parse`,\n  //     //   `${delta.toFixed(3)}ms`,\n  //     //   args[0]\n  //     // )\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(createRenderer(rules, options.renderRule))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={slug(def.identifier, slugify)} key={def.identifier}>\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<\n  Omit<React.HTMLAttributes<Element>, 'children'> & {\n    children: string\n    options?: MarkdownToJSX.Options\n  }\n> = ({ children = '', options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof React.JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an HTML context */\n    inHTML?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** used for lookbacks */\n    prevCapture?: string\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    alert?: string\n    children: MarkdownToJSX.ParserResult[]\n    type: typeof RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: typeof RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: typeof RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: typeof RuleType.codeBlock\n    attrs?: React.JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: typeof RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: typeof RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: typeof RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: typeof RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: typeof RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: typeof RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: typeof RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: typeof RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: typeof RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: typeof RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: typeof RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: typeof RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: typeof RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: typeof RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: typeof RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: typeof RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: typeof RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: typeof RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: typeof RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: typeof RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: string\n    ref: string\n  }\n\n  export interface TableNode {\n    type: typeof RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: typeof RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: typeof RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: typeof RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: typeof RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: typeof RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: typeof RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: typeof RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: typeof RuleType.htmlBlock\n    attrs: React.JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: typeof RuleType.htmlSelfClosing\n    attrs: React.JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => React.JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: (typeof Priority)[keyof typeof Priority]\n    _parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    /**\n     * Optional fast check that can quickly determine if this rule\n     * should even be attempted. Should check the start of the source string\n     * for quick patterns without expensive regex operations.\n     *\n     * @param source The input source string (already trimmed of leading whitespace)\n     * @param state Current parser state\n     * @returns true if the rule should be attempted, false to skip\n     */\n    _qualify?:\n      | string[]\n      | ((source: string, state: MarkdownToJSX.State) => boolean)\n    _render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactNode\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: K extends typeof RuleType.table\n      ? Rule<Extract<ParserResult, { type: K | typeof RuleType.paragraph }>>\n      : Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.JSX.IntrinsicAttributes,\n      ...children: React.ReactNode[]\n    ) => React.ReactNode\n\n    /**\n     * The library automatically generates an anchor tag for bare URLs included in the markdown\n     * document, but this behavior can be disabled if desired.\n     */\n    disableAutoLink: boolean\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, renderChildren, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactNode,\n      /** the current AST node, use `RuleType` against `node.type` for identification */\n      node: ParserResult,\n      /** use as `renderChildren(node.children)` for block nodes */\n      renderChildren: RuleOutput,\n      /** contains `key` which should be supplied to the topmost JSX element */\n      state: State\n    ) => React.ReactNode\n\n    /**\n     * Override the built-in sanitizer function for URLs, etc if desired. The built-in version is available as a library export called `sanitizer`.\n     */\n    sanitizer: (\n      value: string,\n      tag: HTMLTags,\n      attribute: string\n    ) => string | null\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (input: string, defaultFn: (input: string) => string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n"]},"metadata":{},"sourceType":"module"}