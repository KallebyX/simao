{"ast":null,"code":"var _jsxFileName = \"/workspaces/simao/whaticket/frontend/src/components/ContactImport/index.js\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport { read, utils } from \"xlsx\";\nimport { Button, FormControlLabel, FormGroup, MenuItem, Select, Switch, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@material-ui/core\";\nimport api from \"../../services/api\";\nimport upload from \"../../assets/upload.gif\";\nimport { useHistory } from \"react-router-dom\";\nimport toastError from \"../../errors/toastError\";\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\";\nimport { toast } from \"react-toastify\";\nfunction WorksheetToDatagrid(ws) {\n  /* create an array of arrays */\n  const rows = utils.sheet_to_json(ws, {\n    header: 1,\n    defval: \"\"\n  });\n\n  /* create column array */\n  const range = utils.decode_range(ws[\"!ref\"] || \"A1\");\n  const columns = Array.from({\n    length: range.e.c + 1\n  }, (_, i) => ({\n    key: String(i),\n    // RDG will access row[\"0\"], row[\"1\"], etc\n    name: utils.encode_col(i) // the column labels will be A, B, etc\n    //editor: textEditor // enable cell editing\n  }));\n  return {\n    rows,\n    columns\n  }; // these can be fed to setRows / setColumns\n}\nconst useStyles = makeStyles(theme => ({\n  xlsTable: {\n    width: \"100%\"\n  },\n  tableContainer: {\n    flex: 1,\n    padding: 1,\n    overflowX: \"auto\",\n    overflowY: \"scroll\",\n    ...theme.scrollbarStyles\n  },\n  actions: {\n    padding: 2,\n    border: \"1px solid #CCC\",\n    boxShadow: \"1px 1px 5px #CCC\",\n    marginTop: 2,\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n  importOptions: {\n    padding: 2,\n    border: \"1px solid #CCC\",\n    boxShadow: \"1px 1px 5px #CCC\",\n    marginTop: 2,\n    marginBottom: 2\n  },\n  error: {\n    color: \"red\",\n    marginTop: 1\n  },\n  buttonImport: {\n    marginRight: 1\n  },\n  select: {\n    minWidth: 200\n  },\n  backButtonContainer: {\n    textAlign: \"center\",\n    marginTop: 20\n  }\n}));\nconst ContactImport = () => {\n  const size = useWindowDimensions();\n  const [rows, setRows] = useState(null);\n  const [columns, setColumns] = useState(null);\n  const classes = useStyles();\n  const history = useHistory();\n  const [contactFieldsAvailable, setContactFieldsAvailable] = useState([]);\n  const [columnValue, setColumnValue] = useState({});\n  const [selectedFields, setSelectedFields] = useState({}); // Para rastrear seleções únicas\n\n  const [openingFile, setOpeningFile] = useState(false);\n  const [selection, setSelection] = useState({});\n  const [invalidFile, setInvalidFile] = useState(false);\n  const [error, setError] = useState(null);\n  const [countCreated, setCountCreated] = useState(0);\n  const [countIgnored, setCountIgnored] = useState(0);\n  const [uploading, setUploading] = useState(false);\n  const [imported, setImported] = useState(false);\n  const [selectedRows, setSelectedRows] = useState({});\n  const [validateContact, setValidateContact] = useState(false);\n  const contactFields = [{\n    id: \"name\",\n    label: \"Nome\",\n    required: true\n  }, {\n    id: \"number\",\n    label: \"Número\",\n    required: true\n  }, {\n    id: \"email\",\n    label: \"E-mail\",\n    required: false\n  }, {\n    id: \"tags\",\n    label: \"Tags\",\n    required: false\n  }];\n  useEffect(() => {\n    setContactFieldsAvailable(contactFields);\n  }, []);\n  const processImport = async () => {\n    setUploading(true);\n    console.log(selection);\n    if (!selection.number) {\n      toastError(\"Não foi selecionado o campo de número do contato\");\n      setUploading(false);\n      return;\n    }\n    if (!selection.name) {\n      toastError(\"Não foi selecionado o campo de nome do contato\");\n      setUploading(false);\n      return;\n    }\n    if (Object.keys(selectedRows).length === 0) {\n      toastError(\"Nenhum contato selecionado\");\n      setUploading(false);\n      return;\n    }\n    if ((rows === null || rows === void 0 ? void 0 : rows.length) > 1) {\n      for (let index = 1; index < rows.length; index++) {\n        if (selectedRows[index]) {\n          // Importar apenas as linhas selecionadas\n          const item = rows[index];\n          const contactData = {};\n          for (let columnIndex = 0; columnIndex < columns.length; columnIndex++) {\n            const column = columns[columnIndex];\n            const selectedField = columnValue[column.key];\n            if (selectedField) {\n              contactData[selectedField] = item[columnIndex];\n            }\n          }\n          // Verificar se os campos obrigatórios estão presentes\n          const missingRequiredFields = contactFields.some(field => field.required && !contactData[field.id]);\n          if (missingRequiredFields) {\n            setCountIgnored(prevCount => prevCount + 1);\n            continue;\n          }\n          try {\n            const data = await api.post('/contactsImport', {\n              ...contactData,\n              validateContact: validateContact ? \"true\" : \"false\"\n            });\n            if (data.status === 200) {\n              setCountCreated(prevCount => prevCount + 1);\n            } else {\n              setCountIgnored(prevCount => prevCount + 1);\n            }\n          } catch (error) {\n            setCountIgnored(prevCount => prevCount + 1);\n          }\n        }\n      }\n      setValidateContact(false);\n      setSelectedRows({});\n      setImported(true);\n      setUploading(false);\n      if (countIgnored === 0) {\n        toast.success(\"Importação realizada com sucesso\");\n      } else {\n        toast.alert(\"Importação realizada com sucesso, mas houveram alguns erros\");\n      }\n    }\n  };\n  const onChangeFile = acceptedFiles => {\n    if (acceptedFiles.length === 0) return;\n    setOpeningFile(true);\n    setInvalidFile(false);\n    setImported(false);\n    setUploading(false);\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      try {\n        const data = e.target.result;\n        const wb = read(data);\n        const ws = wb.Sheets[wb.SheetNames[0]];\n        const {\n          rows,\n          columns\n        } = WorksheetToDatagrid(ws);\n        setRows(rows);\n        setColumns(columns);\n        setOpeningFile(false);\n      } catch (e) {\n        console.error(e);\n        setInvalidFile(true);\n        setOpeningFile(false);\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  const handleSelectChange = event => {\n    const newValue = event.target.value;\n    const columnKey = event.target.name;\n\n    // Remover antiga seleção\n    if (columnValue[columnKey]) {\n      const oldValue = columnValue[columnKey];\n      setSelectedFields(prevSelectedFields => {\n        const newSelectedFields = {\n          ...prevSelectedFields\n        };\n        delete newSelectedFields[oldValue];\n        return newSelectedFields;\n      });\n    }\n\n    // Se o novo valor for vazio, limpar a seleção\n    if (newValue === \"\") {\n      setColumnValue(prevColumnValue => {\n        const newColumnValue = {\n          ...prevColumnValue\n        };\n        delete newColumnValue[columnKey];\n        return newColumnValue;\n      });\n      setSelection(prevSelection => {\n        const newSelection = {\n          ...prevSelection\n        };\n        Object.keys(newSelection).forEach(key => {\n          if (newSelection[key] === columnKey) {\n            delete newSelection[key];\n          }\n        });\n        return newSelection;\n      });\n      return;\n    }\n\n    // Verificar se o novo valor já foi selecionado\n    if (selectedFields[newValue]) {\n      toastError(`O campo ${newValue} já foi selecionado.`);\n      return;\n    }\n\n    // Atualizar seleção\n    setSelection(selection => ({\n      ...selection,\n      [newValue]: columnKey\n    }));\n    setSelectedFields(prevSelectedFields => ({\n      ...prevSelectedFields,\n      [newValue]: columnKey\n    }));\n    setColumnValue(columnValue => ({\n      ...columnValue,\n      [columnKey]: newValue\n    }));\n  };\n  const renderSelectbox = column => {\n    return /*#__PURE__*/React.createElement(Select, {\n      value: columnValue[column.key],\n      name: column.key,\n      onChange: handleSelectChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MenuItem, {\n      value: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }\n    }, \"\\xA0\"), contactFieldsAvailable.map(contactField => /*#__PURE__*/React.createElement(MenuItem, {\n      value: contactField.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }\n    }, contactField.label)));\n  };\n  const renderXls = () => {\n    return /*#__PURE__*/React.createElement(TableContainer, {\n      className: classes.tableContainer,\n      style: {\n        height: size.height * 0.75\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      stickyHeader: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      key: columns.length,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: Object.keys(selectedRows).length === rows.length - 1 // Se todas as linhas, exceto a primeira, estiverem marcadas\n      ,\n      onChange: event => {\n        const isChecked = event.target.checked;\n        const newSelectedRows = {};\n        if (isChecked) {\n          // Marcar todas as linhas, exceto a primeira\n          for (let i = 1; i < rows.length; i++) {\n            newSelectedRows[i] = true;\n          }\n        }\n        setSelectedRows(newSelectedRows);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }\n    })), columns.map(column => /*#__PURE__*/React.createElement(TableCell, {\n      key: column.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }\n    }, column.name))), /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 15\n      }\n    }), columns.map(column => /*#__PURE__*/React.createElement(TableCell, {\n      key: column.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 17\n      }\n    }, renderSelectbox(column))))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }\n    }, rows.map((row, rowIndex) => /*#__PURE__*/React.createElement(TableRow, {\n      key: rowIndex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 15\n      }\n    }, rowIndex !== 0 && /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: !!selectedRows[rowIndex],\n      onChange: () => {\n        setSelectedRows(prevSelectedRows => ({\n          ...prevSelectedRows,\n          [rowIndex]: !prevSelectedRows[rowIndex]\n        }));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 21\n      }\n    })), rowIndex !== 0 && row.map((column, columnIndex) => /*#__PURE__*/React.createElement(TableCell, {\n      key: columnIndex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 21\n      }\n    }, column)))))));\n  };\n  const handleCloseImport = async () => {\n    try {\n      history.push(\"/contacts\");\n    } catch (err) {\n      toastError(err);\n    }\n  };\n  const renderContent = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.importOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      row: true,\n      style: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-around'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormControlLabel, {\n      control: /*#__PURE__*/React.createElement(Switch, {\n        checked: validateContact,\n        onChange: event => setValidateContact(event.target.checked),\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 17\n        }\n      }),\n      label: \"Validar contatos no WhatsApp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 13\n      }\n    }))), renderXls(), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.actions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }\n    }, uploading && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 25\n      }\n    }, \"Importando... Aguarde\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      disabled: uploading,\n      className: classes.buttonImport,\n      onClick: () => processImport(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 11\n      }\n    }, \"Importar contatos\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      disabled: uploading,\n      onClick: () => {\n        setRows(null);\n        setColumns(null);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }\n    }, \"Cancelar\"), error && /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 21\n      }\n    }, error)));\n  };\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: onChangeFile,\n    maxFiles: 1\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      alignContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 5\n    }\n  }, imported && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 13\n    }\n  }, countCreated, \" contatos criados\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 13\n    }\n  }, countIgnored, \" contatos ignorados (n\\xFAmero inv\\xE1lido ou n\\xE3o marcados para atualizar)\"))), openingFile && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 23\n    }\n  }, \"Processando arquivo...\"), invalidFile && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 23\n    }\n  }, \"Arquivo inv\\xE1lido!\"), !imported && rows && columns ? renderContent() : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getRootProps(), {\n    className: \"uploaderDrop\",\n    style: {\n      borderRadius: 20,\n      maxWidth: 500,\n      margin: \"20px auto\",\n      border: \"3px dotted #ddd\",\n      padding: 20,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      flexDirection: \"column\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"img\", {\n    src: upload,\n    height: 200,\n    alt: \"Upload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 13\n    }\n  }, \"Clique ou arraste um arquivo\"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"#e74c3c\",\n      fontWeight: \"bold\",\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 13\n    }\n  }, \"* Importante: Arquivos somente com extens\\xF5es s\\xE3o aceitas: xls, xslx, csv, txt\")), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.backButtonContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    disabled: uploading,\n    onClick: handleCloseImport,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 13\n    }\n  }, \"Voltar\"))));\n};\nexport default ContactImport;","map":{"version":3,"names":["React","useEffect","useRef","useState","useDropzone","makeStyles","read","utils","Button","FormControlLabel","FormGroup","MenuItem","Select","Switch","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","api","upload","useHistory","toastError","useWindowDimensions","toast","WorksheetToDatagrid","ws","rows","sheet_to_json","header","defval","range","decode_range","columns","Array","from","length","e","c","_","i","key","String","name","encode_col","useStyles","theme","xlsTable","width","tableContainer","flex","padding","overflowX","overflowY","scrollbarStyles","actions","border","boxShadow","marginTop","display","justifyContent","importOptions","marginBottom","error","color","buttonImport","marginRight","select","minWidth","backButtonContainer","textAlign","ContactImport","size","setRows","setColumns","classes","history","contactFieldsAvailable","setContactFieldsAvailable","columnValue","setColumnValue","selectedFields","setSelectedFields","openingFile","setOpeningFile","selection","setSelection","invalidFile","setInvalidFile","setError","countCreated","setCountCreated","countIgnored","setCountIgnored","uploading","setUploading","imported","setImported","selectedRows","setSelectedRows","validateContact","setValidateContact","contactFields","id","label","required","processImport","console","log","number","Object","keys","index","item","contactData","columnIndex","column","selectedField","missingRequiredFields","some","field","prevCount","data","post","status","success","alert","onChangeFile","acceptedFiles","file","reader","FileReader","onload","target","result","wb","Sheets","SheetNames","readAsArrayBuffer","handleSelectChange","event","newValue","value","columnKey","oldValue","prevSelectedFields","newSelectedFields","prevColumnValue","newColumnValue","prevSelection","newSelection","forEach","renderSelectbox","createElement","onChange","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","contactField","renderXls","className","style","height","stickyHeader","type","checked","isChecked","newSelectedRows","row","rowIndex","prevSelectedRows","handleCloseImport","push","err","renderContent","control","variant","disabled","onClick","getRootProps","getInputProps","onDrop","maxFiles","alignContent","Fragment","assign","borderRadius","maxWidth","margin","alignItems","flexDirection","src","alt","fontWeight"],"sources":["/workspaces/simao/whaticket/frontend/src/components/ContactImport/index.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport { read, utils } from \"xlsx\";\nimport {\n  Button,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Select,\n  Switch,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport api from \"../../services/api\";\nimport upload from \"../../assets/upload.gif\";\nimport { useHistory } from \"react-router-dom\";\nimport toastError from \"../../errors/toastError\";\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\";\nimport { toast } from \"react-toastify\";\n\nfunction WorksheetToDatagrid(ws) {\n  /* create an array of arrays */\n  const rows = utils.sheet_to_json(ws, { header: 1, defval: \"\" });\n\n  /* create column array */\n  const range = utils.decode_range(ws[\"!ref\"] || \"A1\");\n  const columns = Array.from({ length: range.e.c + 1 }, (_, i) => ({\n    key: String(i), // RDG will access row[\"0\"], row[\"1\"], etc\n    name: utils.encode_col(i), // the column labels will be A, B, etc\n    //editor: textEditor // enable cell editing\n  }));\n\n  return { rows, columns }; // these can be fed to setRows / setColumns\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n  xlsTable: {\n    width: \"100%\",\n  },\n  tableContainer: {\n    flex: 1,\n    padding: 1,\n    overflowX: \"auto\",\n    overflowY: \"scroll\",\n    ...theme.scrollbarStyles,\n  },\n  actions: {\n    padding: 2,\n    border: \"1px solid #CCC\",\n    boxShadow: \"1px 1px 5px #CCC\",\n    marginTop: 2,\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  importOptions: {\n    padding: 2,\n    border: \"1px solid #CCC\",\n    boxShadow: \"1px 1px 5px #CCC\",\n    marginTop: 2,\n    marginBottom: 2,\n  },\n  error: {\n    color: \"red\",\n    marginTop: 1,\n  },\n  buttonImport: {\n    marginRight: 1,\n  },\n  select: {\n    minWidth: 200,\n  },\n  backButtonContainer: {\n    textAlign: \"center\",\n    marginTop: 20,\n  },\n}));\n\nconst ContactImport = () => {\n  const size = useWindowDimensions();\n\n  const [rows, setRows] = useState(null);\n  const [columns, setColumns] = useState(null);\n  const classes = useStyles();\n  const history = useHistory();\n  const [contactFieldsAvailable, setContactFieldsAvailable] = useState([]);\n  const [columnValue, setColumnValue] = useState({});\n  const [selectedFields, setSelectedFields] = useState({}); // Para rastrear seleções únicas\n\n  const [openingFile, setOpeningFile] = useState(false);\n  const [selection, setSelection] = useState({});\n  const [invalidFile, setInvalidFile] = useState(false);\n  const [error, setError] = useState(null);\n  const [countCreated, setCountCreated] = useState(0);\n  const [countIgnored, setCountIgnored] = useState(0);\n  const [uploading, setUploading] = useState(false);\n  const [imported, setImported] = useState(false);\n  const [selectedRows, setSelectedRows] = useState({});\n  const [validateContact, setValidateContact] = useState(false);\n  const contactFields = [\n    { id: \"name\", label: \"Nome\", required: true },\n    { id: \"number\", label: \"Número\", required: true },\n    { id: \"email\", label: \"E-mail\", required: false },\n    { id: \"tags\", label: \"Tags\", required: false },\n  ];\n\n  useEffect(() => {\n    setContactFieldsAvailable(contactFields);\n  }, []);\n\n  const processImport = async () => {\n    setUploading(true);\n\n    console.log(selection)\n\n    if (!selection.number) {\n      toastError(\"Não foi selecionado o campo de número do contato\");\n      setUploading(false);\n      return;\n    }\n\n    if (!selection.name) {\n      toastError(\"Não foi selecionado o campo de nome do contato\");\n      setUploading(false);\n      return;\n    }\n\n    if (Object.keys(selectedRows).length === 0) {\n      toastError(\"Nenhum contato selecionado\");\n      setUploading(false);\n      return;\n    }\n\n    if (rows?.length > 1) {\n      for (let index = 1; index < rows.length; index++) {\n        if (selectedRows[index]) { // Importar apenas as linhas selecionadas\n          const item = rows[index];\n          const contactData = {};\n\n          for (let columnIndex = 0; columnIndex < columns.length; columnIndex++) {\n            const column = columns[columnIndex];\n            const selectedField = columnValue[column.key];\n\n            if (selectedField) {\n              contactData[selectedField] = item[columnIndex];\n            }\n          }\n          // Verificar se os campos obrigatórios estão presentes\n          const missingRequiredFields = contactFields.some(field => field.required && !contactData[field.id]);\n\n          if (missingRequiredFields) {\n            setCountIgnored(prevCount => prevCount + 1);\n            continue;\n          }\n\n          try {\n            const data = await api.post('/contactsImport', {\n              ...contactData,\n              validateContact: validateContact ? \"true\" : \"false\",\n            });\n\n            if (data.status === 200) {\n              setCountCreated(prevCount => prevCount + 1);\n            } else {\n              setCountIgnored(prevCount => prevCount + 1);\n            }\n          } catch (error) {\n            setCountIgnored(prevCount => prevCount + 1);\n          }\n        }\n      }\n      setValidateContact(false);\n      setSelectedRows({});\n      setImported(true);\n      setUploading(false);\n      \n      if (countIgnored === 0) {\n        toast.success(\"Importação realizada com sucesso\");\n      } else {\n        toast.alert(\"Importação realizada com sucesso, mas houveram alguns erros\");\n      }\n    }\n  };\n\n  const onChangeFile = (acceptedFiles) => {\n    if (acceptedFiles.length === 0) return;\n    setOpeningFile(true);\n    setInvalidFile(false);\n    setImported(false);\n    setUploading(false);\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      try {\n        const data = e.target.result;\n        const wb = read(data);\n        const ws = wb.Sheets[wb.SheetNames[0]];\n        const { rows, columns } = WorksheetToDatagrid(ws);\n        setRows(rows);\n        setColumns(columns);\n        setOpeningFile(false);\n      } catch (e) {\n        console.error(e);\n        setInvalidFile(true);\n        setOpeningFile(false);\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  };\n\n  const handleSelectChange = (event) => {\n    const newValue = event.target.value;\n    const columnKey = event.target.name;\n  \n    // Remover antiga seleção\n    if (columnValue[columnKey]) {\n      const oldValue = columnValue[columnKey];\n      setSelectedFields((prevSelectedFields) => {\n        const newSelectedFields = { ...prevSelectedFields };\n        delete newSelectedFields[oldValue];\n        return newSelectedFields;\n      });\n    }\n  \n    // Se o novo valor for vazio, limpar a seleção\n    if (newValue === \"\") {\n      setColumnValue((prevColumnValue) => {\n        const newColumnValue = { ...prevColumnValue };\n        delete newColumnValue[columnKey];\n        return newColumnValue;\n      });\n      setSelection((prevSelection) => {\n        const newSelection = { ...prevSelection };\n        Object.keys(newSelection).forEach((key) => {\n          if (newSelection[key] === columnKey) {\n            delete newSelection[key];\n          }\n        });\n        return newSelection;\n      });\n      return;\n    }\n  \n    // Verificar se o novo valor já foi selecionado\n    if (selectedFields[newValue]) {\n      toastError(`O campo ${newValue} já foi selecionado.`);\n      return;\n    }\n  \n    // Atualizar seleção\n    setSelection((selection) => ({ ...selection, [newValue]: columnKey }));\n    setSelectedFields((prevSelectedFields) => ({ ...prevSelectedFields, [newValue]: columnKey }));\n    setColumnValue((columnValue) => ({ ...columnValue, [columnKey]: newValue }));\n  };\n  \n\n  const renderSelectbox = (column) => {\n    return (\n      <Select value={columnValue[column.key]} name={column.key} onChange={handleSelectChange}>\n        <MenuItem value=\"\">&nbsp;</MenuItem>\n        {contactFieldsAvailable.map((contactField) => (\n          <MenuItem value={contactField.id}>{contactField.label}</MenuItem>\n        ))}\n      </Select>\n    );\n  };\n\n  const renderXls = () => {\n    return (\n      <TableContainer className={classes.tableContainer} style={{ height: size.height * 0.75 }}>\n        <Table stickyHeader>\n          <TableHead key={columns.length}>\n            <TableRow>\n              <TableCell>\n                <input\n                  type=\"checkbox\"\n                  checked={Object.keys(selectedRows).length === rows.length - 1} // Se todas as linhas, exceto a primeira, estiverem marcadas\n                  onChange={(event) => {\n                    const isChecked = event.target.checked;\n                    const newSelectedRows = {};\n                    if (isChecked) {\n                      // Marcar todas as linhas, exceto a primeira\n                      for (let i = 1; i < rows.length; i++) {\n                        newSelectedRows[i] = true;\n                      }\n                    }\n                    setSelectedRows(newSelectedRows);\n                  }}\n                />\n              </TableCell>\n              {columns.map((column) => (\n                <TableCell key={column.key}>{column.name}</TableCell>\n              ))}\n            </TableRow>\n            <TableRow>\n              <TableCell></TableCell>\n              {columns.map((column) => (\n                <TableCell key={column.key}>{renderSelectbox(column)}</TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row, rowIndex) => (\n              <TableRow key={rowIndex}>\n                {rowIndex !== 0 && (\n                  <TableCell>\n                    <input\n                      type=\"checkbox\"\n                      checked={!!selectedRows[rowIndex]}\n                      onChange={() => {\n                        setSelectedRows((prevSelectedRows) => ({\n                          ...prevSelectedRows,\n                          [rowIndex]: !prevSelectedRows[rowIndex],\n                        }));\n                      }}\n                    />\n                  </TableCell>\n                )}\n                {rowIndex !== 0 && (\n                  row.map((column, columnIndex) => (\n                    <TableCell key={columnIndex}>{column}</TableCell>\n                  ))\n                )}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  };\n\n\n  const handleCloseImport = async () => {\n    try {\n      history.push(\"/contacts\");\n    } catch (err) {\n      toastError(err);\n    }\n  };\n\n  const renderContent = () => {\n    return (\n      <div>\n        <div className={classes.importOptions}>\n          <FormGroup row style={{ width: '100%', display: 'flex', justifyContent: 'space-around' }}>\n            <FormControlLabel\n              control={\n                <Switch checked={validateContact} onChange={(event) => setValidateContact(event.target.checked)} color=\"primary\" />\n              }\n              label=\"Validar contatos no WhatsApp\"\n            />\n          </FormGroup>\n        </div>\n        {renderXls()}\n        <div className={classes.actions}>\n          {uploading && <div>Importando... Aguarde</div>}\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={uploading}\n            className={classes.buttonImport}\n            onClick={() => processImport()}\n          >\n            Importar contatos\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            disabled={uploading}\n            onClick={() => {\n              setRows(null);\n              setColumns(null);\n            }}\n          >\n            Cancelar\n          </Button>\n          {error && <div className={classes.error}>{error}</div>}\n        </div>\n      </div>\n    );\n  };\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop: onChangeFile,\n    maxFiles: 1,\n  });\n\n  return (\n    <div style={{ alignContent: \"center\" }}>\n      {imported && (\n        <div>\n          <ul>\n            <li>{countCreated} contatos criados</li>\n            <li>{countIgnored} contatos ignorados (número inválido ou não marcados para atualizar)</li>\n          </ul>\n        </div>\n      )}\n      {openingFile && <div>Processando arquivo...</div>}\n      {invalidFile && <div>Arquivo inválido!</div>}\n      {!imported && rows && columns ? renderContent() : (\n        <>\n          <div\n            {...getRootProps()}\n            className=\"uploaderDrop\"\n            style={{\n              borderRadius: 20,\n              maxWidth: 500,\n              margin: \"20px auto\",\n              border: \"3px dotted #ddd\",\n              padding: 20,\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              flexDirection: \"column\",\n            }}\n          >\n            <img src={upload} height={200} alt=\"Upload\" />\n            <h5>Clique ou arraste um arquivo</h5>\n            <p style={{ color: \"#e74c3c\", fontWeight: \"bold\", textAlign: \"center\" }}>\n              * Importante: Arquivos somente com extensões são aceitas: xls, xslx, csv, txt\n            </p>\n          </div>\n\n          <input {...getInputProps()} />\n\n          <div className={classes.backButtonContainer}>\n            <Button variant=\"contained\" color=\"secondary\" disabled={uploading} onClick={handleCloseImport}>\n              Voltar\n            </Button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ContactImport;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}